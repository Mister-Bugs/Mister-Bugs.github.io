<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用配置文件</title>
    <link href="/2021/04/26/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/26/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="0、常用包"><a href="#0、常用包" class="headerlink" title="0、常用包"></a>0、常用包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--测试包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1、maven的pom配置"><a href="#1、maven的pom配置" class="headerlink" title="1、maven的pom配置"></a>1、maven的pom配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 </span></span><br><span class="hljs-tag"><span class="hljs-string">                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--这里面的东西从官网找--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>    <br>    <span class="hljs-comment">&lt;!--设置编码方式为UTF-8--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <br>    <br>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br>    <span class="hljs-comment">&lt;!--本质：使在src/main/java和src/main/resources目录下的.xml文件能够加载到--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、Mybatis配置"><a href="#2、Mybatis配置" class="headerlink" title="2、Mybatis配置"></a>2、Mybatis配置</h2><p>导包mybatis与mysql-connector-java</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mybatis核心配置文件中，配置我们的日志！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>起别名，默认为这个报下类的小写名字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ocean.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入db.properties参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>整合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ocean.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/.....xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、servlet配置"><a href="#3、servlet配置" class="headerlink" title="3、servlet配置"></a>3、servlet配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解决乱码问题</span><br>req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--jstl表达式依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp.jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、测试包"><a href="#4、测试包" class="headerlink" title="4、测试包"></a>4、测试包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--测试用@Test--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、偷懒插件-Lombok"><a href="#5、偷懒插件-Lombok" class="headerlink" title="5、偷懒插件 Lombok"></a>5、偷懒插件 Lombok</h2><p>以前，我们使用Alt+Insert，可以快速生成：构造器，get、set方法，toString()方法</p><p>用了这个插件之后，我们可以通过注解实现这些功能，而不用再插入了</p><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上加注解即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">一般使用这三个足矣<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br></code></pre></td></tr></table></figure></li></ol><p>@Data包含这些：无参构造，get、set、tostring、hashcode，equals</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@SneakyThrows</span><br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span>：无参构造，get、set、tostring、hashcode，equals<br><span class="hljs-variable">@AllArgsConstructor</span>  有参构造<br><span class="hljs-variable">@NoArgsConstructor</span>   无参构造<br><span class="hljs-variable">@EqualsAndHashCode</span>   <br><span class="hljs-variable">@ToString</span>  <br><span class="hljs-variable">@Getter</span><br></code></pre></td></tr></table></figure><h2 id="6、spring配置"><a href="#6、spring配置" class="headerlink" title="6、spring配置"></a>6、spring配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启Ioc注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-comment">&lt;!--指定扫描的包，这个包下的注解就会生效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--aop织入包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启aop注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>spring整mybatis的包:</p><ul><li>mybatis-spring</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、SSM框架配置"><a href="#7、SSM框架配置" class="headerlink" title="7、SSM框架配置"></a>7、SSM框架配置</h2><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510213940.png" alt="image-20210510213938084"></p><h3 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--lombok包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- servlet依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jstl表达式依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp.jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-service.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mvc.xml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="database-properties"><a href="#database-properties" class="headerlink" title="database.properties"></a>database.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">12456</span><br></code></pre></td></tr></table></figure><h4 id="mybatisConfig-xml"><a href="#mybatisConfig-xml" class="headerlink" title="mybatisConfig.xml"></a>mybatisConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--允许这个包下的类使用别名，也就是不用再写一大串--&gt;</span><br>    <span class="hljs-comment">&lt;!--resultType=&quot;com.ocean.pojo.User&quot;直接写resultType=&quot;User&quot;即可--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ocean.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/BookMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置整合mybatis --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1.关联数据库配置文件,关联applicationContext.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池</span><br><span class="hljs-comment">        dbcp 半自动化操作 不能自动连接</span><br><span class="hljs-comment">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定Mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatisConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 功能：替代了原有的BookMapperImpl</span><br><span class="hljs-comment">    Mybatis MapperScannerConfigurer 自动扫描 将Mapper接口生成代理注入到Spring--&gt;</span><br>    <span class="hljs-comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.ocean.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--SqlSessionTemplate：就是我们使用的sqlSession。Template:模板--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注解驱动</span><br><span class="hljs-comment">    处理映射器和处理适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--2.静态资源过滤</span><br><span class="hljs-comment">    让Spring MVC不处理静态资源  html,jpg,mp3,mp4 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--3.扫描包：controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--4.视图解析器</span><br><span class="hljs-comment">    DispatcherServlet给他的ModelAndView--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:sop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1.扫描service相关的bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean.service&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--2.将我们所有的业务类注入到IOC容器中,也可以用注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.service.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3.配置事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--4.aop事务支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--DispatcherServlet要绑定Spring的配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动级别为1--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--过滤器解决乱码问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Session过期时间，15分钟--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架实战</title>
    <link href="/2021/04/22/SSM%E6%A1%86%E6%9E%B6/"/>
    <url>/2021/04/22/SSM%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1、项目概述"><a href="#1、项目概述" class="headerlink" title="1、项目概述"></a>1、项目概述</h2><h3 id="项目展示（成果）"><a href="#项目展示（成果）" class="headerlink" title="项目展示（成果）"></a>项目展示（成果）</h3><p><strong>点击图片即可放大观看</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510234205.gif" alt="动画"></p><h3 id="甲方要求"><a href="#甲方要求" class="headerlink" title="甲方要求"></a>甲方要求</h3><p>使用SSM框架搭建一个能够增删改查的简单图书管理系统。</p><h2 id="2、项目环境搭建"><a href="#2、项目环境搭建" class="headerlink" title="2、项目环境搭建"></a>2、项目环境搭建</h2><h3 id="2-1-Project"><a href="#2-1-Project" class="headerlink" title="2.1  Project"></a>2.1  Project</h3><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510234215.png" alt="image-20210510213938084"></p><h3 id="2-2-依赖包"><a href="#2-2-依赖包" class="headerlink" title="2.2  依赖包"></a>2.2  依赖包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--lombok包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- servlet依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jstl表达式依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp.jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3  配置"></a>2.3  配置</h3><h4 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-service.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mvc.xml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="database-properties"><a href="#database-properties" class="headerlink" title="database.properties"></a>database.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">12456</span><br></code></pre></td></tr></table></figure><h4 id="mybatisConfig-xml"><a href="#mybatisConfig-xml" class="headerlink" title="mybatisConfig.xml"></a>mybatisConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--允许这个包下的类使用别名，也就是不用再写一大串--&gt;</span><br>    <span class="hljs-comment">&lt;!--resultType=&quot;com.ocean.pojo.User&quot;直接写resultType=&quot;User&quot;即可--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ocean.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/BookMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置整合mybatis --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1.关联数据库配置文件,关联applicationContext.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池</span><br><span class="hljs-comment">        dbcp 半自动化操作 不能自动连接</span><br><span class="hljs-comment">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定Mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatisConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 功能：替代了原有的BookMapperImpl</span><br><span class="hljs-comment">    Mybatis MapperScannerConfigurer 自动扫描 将Mapper接口生成代理注入到Spring--&gt;</span><br>    <span class="hljs-comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.ocean.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--SqlSessionTemplate：就是我们使用的sqlSession。Template:模板--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注解驱动</span><br><span class="hljs-comment">    处理映射器和处理适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--2.静态资源过滤</span><br><span class="hljs-comment">    让Spring MVC不处理静态资源  html,jpg,mp3,mp4 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--3.扫描包：controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--4.视图解析器</span><br><span class="hljs-comment">    DispatcherServlet给他的ModelAndView--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:sop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1.扫描service相关的bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean.service&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--2.将我们所有的业务类注入到IOC容器中,也可以用注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.service.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3.配置事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--4.aop事务支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--DispatcherServlet要绑定Spring的配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动级别为1--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--过滤器解决乱码问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Session过期时间，15分钟--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-建数据库和实体类"><a href="#2-4-建数据库和实体类" class="headerlink" title="2.4  建数据库和实体类"></a>2.4  建数据库和实体类</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `ssmbuild`;<br><br>USE `ssmbuild`;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `books`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `books` (<br>`bookID` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;书id&#x27;</span>,<br>`bookName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;书名&#x27;</span>,<br>`bookCounts` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;数量&#x27;</span>,<br>`detail` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;描述&#x27;</span>,<br>KEY `bookID` (`bookID`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Java&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;从入门到放弃&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;MySQL&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;从删库到跑路&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Linux&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;从进门到进牢&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;<br>    <span class="hljs-keyword">private</span> String detail;<br>    <span class="hljs-comment">//有参无参构造器、get、set、equals、hashCode、toString</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-分析问题、抽象接口（关键）"><a href="#2-5-分析问题、抽象接口（关键）" class="headerlink" title="2.5  分析问题、抽象接口（关键）"></a>2.5  分析问题、抽象接口（关键）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">// 增</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 删，根据id删除一个Book</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 改</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 查询一本书，根据id查询,返回一个Book</span><br>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 查询所有的书</span><br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-实现业务"><a href="#2-6-实现业务" class="headerlink" title="2.6  实现业务"></a>2.6  实现业务</h3><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><p>BookServiceImpl接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//业务层调用dao层</span><br>    <span class="hljs-comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span><br>    <span class="hljs-keyword">private</span> BookMapper bookMapper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookMapper = bookMapper;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.addBook(books);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.deleteBook(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBooks();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryBooksByName</span><span class="hljs-params">(String bookName)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBooksByName(bookName);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h4><h5 id="BookMapper"><a href="#BookMapper" class="headerlink" title="BookMapper"></a>BookMapper</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">// 增</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 删，根据id删除一个Book</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookID&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 改</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>    <span class="hljs-comment">// 查询一本书，根据id查询,返回一个Book</span><br>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookID&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">// 查询所有的书</span><br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryBooks</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="BookMapper-xml"><a href="#BookMapper-xml" class="headerlink" title="BookMapper.xml"></a>BookMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--nameplace用来绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.ocean.dao.BookMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--增--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        insert into ssmbuild.books(bookName,bookCounts,detail)<br>        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--删--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from ssmbuild.books where bookID=#&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--改--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>        update ssmbuild.books set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;<br>        where bookID=#&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询一本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ocean.pojo.Books&quot;</span>&gt;</span><br>        select * from ssmbuild.books where bookID=#&#123;bookID&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--查询所有--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBooks&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ocean.pojo.Books&quot;</span>&gt;</span><br>        select * from ssmbuild.books<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="controlle层"><a href="#controlle层" class="headerlink" title="controlle层"></a>controlle层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;<br>    <span class="hljs-comment">//controller层调用service层</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">//查询全部的书籍，并且返回到书籍展示页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        List&lt;Books&gt; list = bookService.queryBooks();<br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//跳转到增加书籍页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAddBook</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//添加书籍的请求</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加书籍&quot;</span>+books);<br>        bookService.addBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<span class="hljs-comment">//重定向到allBook,防止网页刷新过快，添加多本书籍</span><br>    &#125;<br><br>    <span class="hljs-comment">//跳转到修改页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdateBook</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,Model model)</span></span>&#123;<br>        Books books = bookService.queryBookById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;qbook&quot;</span>,books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//修改书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改书籍&quot;</span>+books);<br>        bookService.updateBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<span class="hljs-comment">//重定向到allBook,防止网页刷新过快，添加多本书籍</span><br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/deleteBook/&#123;bookid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookid&quot;)</span> <span class="hljs-keyword">int</span> idd)</span></span>&#123;<br>        bookService.deleteBook(idd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<span class="hljs-comment">//重定向到allBook,防止网页刷新过快，添加多本书籍</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><h5 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;首页&lt;/title&gt;<br><br>    &lt;style&gt;<br>      a&#123;<br>        text-decoration: none;<br>        color: black;<br>        font-size: 18px;<br>      &#125;<br>      h3 &#123;<br>        width: 180px;<br>        height: 80px;<br>        margin: 200px auto;<br>        <span class="hljs-comment">/*外边距，auto左右居中*/</span><br>        text-align: center;<br>        <span class="hljs-comment">/*文本居中*/</span><br>        line-height: 80px;<br>        <span class="hljs-comment">/*行高：与字体一样就居中了*/</span><br>        background: #7eb7d2;<br>        border-radius: 4px;<br>      &#125;<br><br>    &lt;/style&gt;<br><br>  &lt;/head&gt;<br>  &lt;body&gt;<br><br>  &lt;h3&gt;<br>    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;进入书籍页面&lt;/a&gt;<br>  &lt;/h3&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h5 id="allBook-jsp"><a href="#allBook-jsp" class="headerlink" title="allBook.jsp"></a>allBook.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;书籍列表&lt;/title&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;!-- 引入 Bootstrap --&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br><br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>            &lt;form <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span> &gt;<br>                &lt;a class=&quot;btn btn-warning&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;&gt;增加&lt;/a&gt;<br>            &lt;/form&gt;<br>    &lt;/div&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;<br>                &lt;thead&gt;<br>                &lt;tr&gt;<br>                    &lt;th&gt;书籍编号&lt;/th&gt;<br>                    &lt;th&gt;书籍名字&lt;/th&gt;<br>                    &lt;th&gt;书籍数量&lt;/th&gt;<br>                    &lt;th&gt;书籍详情&lt;/th&gt;<br>                    &lt;th&gt;操作&lt;/th&gt;<br>                &lt;/tr&gt;<br>                &lt;/thead&gt;<br><br>                &lt;tbody&gt;<br>                &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;<br>                        &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;<br>                        &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;<br>                        &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;<br><br>                        &lt;td&gt;<br>                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;&gt;更改&lt;/a&gt; |<br>                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.getBookID()&#125;&quot;&gt;删除&lt;/a&gt;<br>                        &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                &lt;/c:forEach&gt;<br>                &lt;/tbody&gt;<br>            &lt;/table&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h5 id="addBook-jsp"><a href="#addBook-jsp" class="headerlink" title="addBook.jsp"></a>addBook.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;增加书籍&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;新增书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label &gt;书籍名字:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> required  placeholder=<span class="hljs-string">&quot;请输入&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label &gt;书籍数量:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> required placeholder=<span class="hljs-string">&quot;请输入&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍简介:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> required placeholder=<span class="hljs-string">&quot;请输入&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;增加&lt;/button&gt;<br>    &lt;/form&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h5 id="updateBook-jsp"><a href="#updateBook-jsp" class="headerlink" title="updateBook.jsp"></a>updateBook.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;修改书籍&lt;/title&gt;<br>    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;<br>                &lt;h1&gt;<br>                    &lt;small&gt;修改书籍&lt;/small&gt;<br>                &lt;/h1&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;<br>        &lt;%--前端通过隐藏域传id，--%&gt;<br>        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;bookID&quot;</span> value=<span class="hljs-string">&quot;$&#123;qbook.bookID&#125;&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label &gt;书籍名字:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> required  value=<span class="hljs-string">&quot;$&#123;qbook.bookName&#125;&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label &gt;书籍数量:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> required value=<span class="hljs-string">&quot;$&#123;qbook.bookCounts&#125;&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label&gt;书籍简介:&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> required value=<span class="hljs-string">&quot;$&#123;qbook.detail&#125;&quot;</span>&gt;<br>        &lt;/div&gt;<br>        &lt;br&gt;<br>        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;修改&lt;/button&gt;<br>    &lt;/form&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="3、消灭Bug的过程"><a href="#3、消灭Bug的过程" class="headerlink" title="3、消灭Bug的过程"></a>3、消灭Bug的过程</h2><h3 id="Bug的寻找"><a href="#Bug的寻找" class="headerlink" title="Bug的寻找"></a>Bug的寻找</h3><ol><li><p>首先运行服务器，首页直接404，问题：web文件夹未被标识，解决</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510234231.png" alt="image-20210429102314736"></p></li><li><p>检查到数据库连接出了问题，数据库写错了（苦笑），改正，但程序依然报错</p></li><li><p>于是百度，找到一篇文章，还是数据库连接的问题</p><ul><li>热心网友：多谢，意思是properties文件中的username与系统中的username重名了，改个名就行了。从网上也查了其它解决办法，我还纳闷properties文件中的属性名都加个jdbc.前缀怎么就通了</li><li>执行方法：在db.properties的属性前缀jdbc，测试后依然不行</li></ul></li><li><p>错误是找不到BookMapper的方法，分析原因：bean不存在</p><ul><li>注册bean成功</li><li>编写代码测试，发现可以</li><li>检查web.xml文件，发现其绑的配置文件错了，改正后，程序运行正常（开心的像个孩子）</li></ul></li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>用户与开发者的不同视角</p><p>开发：底层–&gt;前端</p><p>用户访问：前端–&gt;底层–&gt;前端</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510234240.png" alt="image-20210430095756912"></p>]]></content>
    
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习笔记</title>
    <link href="/2021/03/22/SpringMVC/"/>
    <url>/2021/03/22/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Spring-MVC是个啥？"><a href="#1、Spring-MVC是个啥？" class="headerlink" title="1、Spring MVC是个啥？"></a>1、Spring MVC是个啥？</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1  什么是MVC"></a>1.1  什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><h3 id="1-2-Spring-MVC"><a href="#1-2-Spring-MVC" class="headerlink" title="1.2  Spring MVC"></a>1.2  Spring MVC</h3><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/mvc.png" alt="mvc"></p><h4 id="spring执行原理"><a href="#spring执行原理" class="headerlink" title="spring执行原理"></a>spring执行原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/5-1ZG2095404c8.png" alt="Spring MVC工作原理图"></p><p>(1) Http请求：客户端请求提交到DispatcherServlet。<br>(2) 寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。<br>(3) 调用处理器：DispatcherServlet将请求提交到Controller。<br>(4)(5)调用业务处理和返回结果：Controller调用业务逻辑处理后，返回ModelAndView。<br>(6)(7)处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。<br>(8) Http响应：视图负责将结果显示到客户端。</p><h4 id="SpringMVC接口解释"><a href="#SpringMVC接口解释" class="headerlink" title="SpringMVC接口解释"></a>SpringMVC接口解释</h4><p>（1）DispatcherServlet接口：<br>Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。<br>（2）HandlerMapping接口：<br>能够完成客户请求到Controller映射。<br>（3）Controller接口：<br>需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。<br>Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。<br>从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。<br>（4）ViewResolver接口：<br>Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。</p><h4 id="DispatcherServlet："><a href="#DispatcherServlet：" class="headerlink" title="DispatcherServlet："></a>DispatcherServlet：</h4><p>是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。其主要工作有以下三项：<br>（1）截获符合特定格式的URL请求。<br>（2）初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。<br>（3）初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210426173148517.png" alt="image-20210426173148517"></p><h3 id="1-3-Hello-SpringMVC"><a href="#1-3-Hello-SpringMVC" class="headerlink" title="1.3  Hello SpringMVC"></a>1.3  Hello SpringMVC</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><p><strong>控制器Controller</strong></p><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或<strong>注解定义</strong>两种方法实现。</li><li><strong>控制器负责解析用户的请求并将其转换为一个模型。</strong></li><li>在Spring MVC中一个控制器类可以包含多个方法</li></ul><h2 id="2、项目搭建"><a href="#2、项目搭建" class="headerlink" title="2、项目搭建"></a>2、项目搭建</h2><ul><li>创建一个普通maven项目，添加web</li><li>导包，springmvc需要的包</li><li>配置web.xml，DispatcherServlet，filter</li><li>配置spring，新建applicationContext.xml（配置mvc注解驱动，静态资源过滤，controller扫描包，视图解析器，json乱码处理）</li><li>建立controller层，首先编写个返回字符串的函数进行测试</li><li>配置Tomcat，进行测试</li><li>前端导包：导入jQuery包，方便js编写代码</li></ul><h3 id="项目依赖的包"><a href="#项目依赖的包" class="headerlink" title="项目依赖的包"></a>项目依赖的包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--测试包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--jstl表达式依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp.jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--jackson,json--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--JSON:fastjson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注解驱动</span><br><span class="hljs-comment">    处理映射器和处理适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--2.静态资源过滤</span><br><span class="hljs-comment">    让Spring MVC不处理静态资源  html,jpg,mp3,mp4 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--3.扫描包：controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--4.视图解析器</span><br><span class="hljs-comment">    DispatcherServlet给他的ModelAndView--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--5.处理JSON字符串乱码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、注解与视图跳转"><a href="#3、注解与视图跳转" class="headerlink" title="3、注解与视图跳转"></a>3、注解与视图跳转</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h4><ul><li>@Controller注解类型用于声明Spring类的实例是一个控制器；</li><li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="hljs-meta">@Controller</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/h1&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">hello01</span>(<span class="hljs-params">Model model</span>)</span>&#123;<br>        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello啊，树哥&quot;</span>);<br>        <span class="hljs-comment">//web-inf/jsp/test.jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p><strong>@RequestMapping</strong></p><ul><li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li></ul><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/rsm/t1&quot;</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index.jsp&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/rsm/t2&quot;</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">test2</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//转发二</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index.jsp&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/rsm/t3&quot;</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">test3</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//重定向</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-视图跳转"><a href="#4-视图跳转" class="headerlink" title="4/视图跳转"></a>4/视图跳转</h2><p><a href="https://blog.csdn.net/qq_33369905/article/details/106647331">参考文章</a></p><h3 id="SpringMVC-视图解析器"><a href="#SpringMVC-视图解析器" class="headerlink" title="SpringMVC+视图解析器"></a>SpringMVC+视图解析器</h3><p>视图解析器配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--4.视图解析器</span><br><span class="hljs-comment">    DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//重定向</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>       <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、前后端数据传输"><a href="#5、前后端数据传输" class="headerlink" title="5、前后端数据传输"></a>5、前后端数据传输</h2><p>相关文章：</p><p><a href="https://blog.csdn.net/qq_33369905/article/details/106647331">狂神说SpringMVC04：数据处理及跳转</a></p><p><a href="https://blog.csdn.net/qq_41855420/article/details/104098542">SpringMVC框架之前后端数据交互</a></p><p>前后端传递一般需要定义变量名相同</p><h3 id="前端传后端"><a href="#前端传后端" class="headerlink" title="前端传后端"></a>前端传后端</h3><ol><li>直接通过url传递，在后端定义方法的参数时候添加注解 <code>@PathVariable</code> </li><li>在方法中直接声明参数、或者封装成实体类提交（<strong>注意：前端页面的参数必须与User实体类的属性一一对应</strong>）</li><li>封装成包装类型</li><li>封装成list批量提交</li><li>封装成map</li></ol><h3 id="后端传前端"><a href="#后端传前端" class="headerlink" title="后端传前端"></a>后端传前端</h3><p>后端： <code>model.addAttribute(&quot;msg&quot;, 传到前端的值);</code></p><p>前端：<code>$&#123;msg&#125;</code></p><ul><li>Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller02</span> </span>&#123;<br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/t1/&#123;a&#125;/&#123;b&#125;&quot;,method = &#123;RequestMethod.GET&#125;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/t1/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果为：&quot;</span> + result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="6、RestFul-风格"><a href="#6、RestFul-风格" class="headerlink" title="6、RestFul 风格"></a>6、RestFul 风格</h2><p><strong>概念</strong></p><p>Restful是一种网络应用程序的设计风格和开发方式，基于HTTP，可以使用XML格式定义或JSON格式定义</p><p>基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><h2 id="7、JSON"><a href="#7、JSON" class="headerlink" title="7、JSON"></a>7、JSON</h2><p>JavaScript Object Notation, JS 对象简谱) 是一种轻量级的<strong>数据交换格式</strong></p><p>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。</p><p> 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。 </p><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;33&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>在 JavaScript中一切皆为对象、任何js支持的类型都可以用JSON来表示</p><p>格式：</p><ul><li>对象用{}</li><li>数组用[]</li><li>所有的键值对，都是key: value</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    age: <span class="hljs-number">22</span>,<br>    pwd: <span class="hljs-number">123456</span><br>&#125;<br><span class="hljs-keyword">let</span> personjson = <span class="hljs-built_in">JSON</span>.stringify(person);<span class="hljs-comment">//对象转化为字符串</span><br><span class="hljs-keyword">let</span> person02 = <span class="hljs-built_in">JSON</span>.parse(personjson);<span class="hljs-comment">//字符串转化为对象</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210428084652017.png" alt="image-20210428084652017" style="zoom:150%;" /><h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><p>在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h3><p>在方法上使用@RequestBody注解返回给前端字符串</p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，<strong>一般都使用 @RestController</strong> ，十分便捷！</p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><h2 id="8、Ajax"><a href="#8、Ajax" class="headerlink" title="8、Ajax"></a>8、Ajax</h2><h3 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h3><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li></ul><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><p><strong>基础：需要掌握对jQuery.ajax包的使用</strong></p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>通过 jQuery AJAX 方法，能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jQuery.ajax(...)</span><br><span class="hljs-keyword"> </span>     部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)<br>          async：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      <span class="hljs-keyword">beforeSend：发送请求前执行的函数(全局)</span><br><span class="hljs-keyword"> </span>       complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          <span class="hljs-string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式<br>          <span class="hljs-string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式<br>          <span class="hljs-string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含<span class="hljs-keyword">JavaScript标签，则会尝试去执行。</span><br><span class="hljs-keyword"> </span>       <span class="hljs-string">&quot;script&quot;</span>: 尝试将返回值当作<span class="hljs-keyword">JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="hljs-keyword"> </span>         <span class="hljs-string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的<span class="hljs-keyword">JavaScript对象</span><br><span class="hljs-keyword"> </span>       <span class="hljs-string">&quot;jsonp&quot;</span>: <span class="hljs-keyword">JSONP </span>格式使用 <span class="hljs-keyword">JSONP </span>形式调用函数时，如 <span class="hljs-string">&quot;myurl?callback=?&quot;</span> <span class="hljs-keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><p>Ajax能够视图的转发控制权交给前端来处理，    </p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li>创建一个普通maven项目，添加web</li><li>导包，springmvc需要的包</li><li>配置web.xml，DispatcherServlet，filter</li><li>配置spring，新建applicationContext.xml，配置mvc注解驱动，静态资源过滤，controller扫描包，视图解析器</li><li>建立controller，编写字符串测试代码</li><li>配置Tomcat，进行测试</li><li>导入jQuery包，使用js编写HTML静态网页，利用Ajax实现异步刷新</li></ul><p>Ajax需要配置的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> jQuery.ajax( jQuery.extend( &#123;<br>   url: url,<span class="hljs-comment">//controller的地址</span><br>   type: method,<br>   dataType: type,<br>   data: data,<span class="hljs-comment">//传给controller传的json；相当于request</span><br>   success: callback<span class="hljs-comment">//回调函数，接受controller传的json；返回的data相当于response</span><br>&#125;, jQuery.isPlainObject( url ) &amp;&amp; url ) );<br></code></pre></td></tr></table></figure><p>js通过与表单数据连接</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">在js中使用<br>$(<span class="hljs-string">&quot;#表单的id&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-function">function <span class="hljs-title">verify1</span><span class="hljs-params">()</span></span>&#123;<br>        $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,<br>            &#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#text_account&quot;</span>).val()&#125;,<br>        function (data)&#123;<br>            <span class="hljs-keyword">if</span>(data.toString()===<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>                $(<span class="hljs-string">&quot;#textInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                $(<span class="hljs-string">&quot;#textInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br><br>            &#125;<br>            $(<span class="hljs-string">&quot;#textInfo&quot;</span>).html(data);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">verify2</span><span class="hljs-params">()</span></span>&#123;<br>        $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,<br>            &#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:$(<span class="hljs-string">&quot;#pwd&quot;</span>).val()&#125;,<br>            function (data)&#123;<br>                <span class="hljs-keyword">if</span>(data.toString()===<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>                    $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br><br>                &#125;<br>                $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).html(data);<br>            &#125;);<br>    &#125;<br>&lt;/script&gt;<br>&lt;body&gt;<br>&lt;span&gt;<br><br>账号：&lt;input type=&quot;text&quot; id=&quot;text_account&quot; onblur=&quot;verify1()&quot;&gt;&lt;span id=&quot;textInfo&quot;&gt;&lt;/span&gt;<br>    &lt;br&gt;<br>密码：&lt;input type=&quot;password&quot; id=&quot;pwd&quot; onblur=&quot;verify2()&quot;&gt;&lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;<br><br>&lt;/span&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name, String pwd)</span></span>&#123;<br>    String msg=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(name!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;root&quot;</span>.equals(name))&#123;<br>            msg=<span class="hljs-string">&quot;ok&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            msg=<span class="hljs-string">&quot;用户名错误！&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pwd!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;123456&quot;</span>.equals(pwd))&#123;<br>            msg=<span class="hljs-string">&quot;ok&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            msg=<span class="hljs-string">&quot;密码错误！&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Gif效果"><a href="#Gif效果" class="headerlink" title="Gif效果"></a>Gif效果</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/%E5%8A%A8%E7%94%BB.gif" alt="动画"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210509230425098.png" alt="image-20210509230425098"></p><ol><li>js代码块获取表单的数据， <code>$(&quot;#text_account&quot;)</code></li><li>配置url访问Controller，通过Ajax的参数data传给后端，使用JSON，后端方法参数的变量名需要与前端传的key一致，前端传递<code>&#123;&#39;name&#39;:$(&quot;#text_account&quot;).val()&#125;</code> ，后端接受 <code>public String ajax3(String name, String pwd)</code> ，变量名name需一致。</li><li>Controller进行判断，返回判断结果JSON传给Ajax</li><li>Ajax根据传回的判断结果，进行渲染页面。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="问题及技术积累"><a href="#问题及技术积累" class="headerlink" title="问题及技术积累"></a>问题及技术积累</h1><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>热部署就是正在运行状态的应用，修改了他的源码之后，在不重新启动的情况下能够自动把增量内容编译并部署到服务器上，使得修改立即生效。热部署为了解决的问题有两个， 一是在开发的时候，修改代码后不需要重启应用就能看到效果，大大提升开发效率；二是生产上运行的程序，可以在不停止运行的情况下进行升级，不影响用户使用。</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210426154803382.png" alt="image-20210426154803382"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>改Tomcat</li><li>class中添加lib</li></ul><p>idea的一个bug，后来添加的web，需要手动添加配置文件到lib</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210426115633315.png" alt="image-20210426115633315"></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习笔记</title>
    <link href="/2021/03/02/Java-Web/"/>
    <url>/2021/03/02/Java-Web/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JavaWeb"><a href="#一、JavaWeb" class="headerlink" title="一、JavaWeb"></a>一、JavaWeb</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1-web"><a href="#1-1-web" class="headerlink" title="1.1  web"></a>1.1  web</h3><p><strong>网页</strong></p><ul><li>静态web<ul><li>html，css</li></ul></li><li>动态web<ul><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><h3 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2  web应用程序"></a>1.2  web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p><ul><li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>URL </li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li><li>一个web应用由多部分组成 （静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>Java程序</li><li>jar包</li><li>配置文件 （Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理。</p><h3 id="1-3-web服务器"><a href="#1-3-web服务器" class="headerlink" title="1.3  web服务器"></a>1.3  web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息。</p><h3 id="1-4-Tomcat"><a href="#1-4-Tomcat" class="headerlink" title="1. 4 Tomcat"></a>1. 4 Tomcat</h3><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，Tomcat是Apache 软件基金会一个项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。</p><p><strong>Tomcat启动和配置</strong></p><p>文件夹名字的意思：</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164345.png" alt="1567825763180"></p><p>temp临时文件</p><p><strong>启动。关闭Tomcat</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164350.png" alt="1567825840657"></p><p>常见的默认端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80（TCP的默认端口号,端口号就是进程号）</li><li>https：443</li></ul><p><strong>配置文件的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164355.png" alt="1567825967256"></p><ul><li>Tomcat打印信息乱码：</li></ul><p> 在conf目录下把logging属性文件中控制台编码改为ＧBK就可以了</p><h2 id="2、HTTP协议"><a href="#2、HTTP协议" class="headerlink" title="2、HTTP协议"></a>2、HTTP协议</h2><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164402.png" alt="img"></p><h3 id="2-1-Http请求"><a href="#2-1-Http请求" class="headerlink" title="2.1  Http请求"></a>2.1  Http请求</h3><p>由客户到服务器</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164408.png" alt="cd4356"></p><ul><li>客户端—发请求（Request）—服务器</li></ul><p>百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">请求行<br>Request URL:https:<span class="hljs-comment">//www.baidu.com/   请求地址</span><br>Request Method:GET    get方法/post方法<br>Status Code:<span class="hljs-number">200</span> OK    状态码：<span class="hljs-number">200</span><br>Remote（远程） Address:<span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">请求头<br>Accept:text/html  <br>Accept-Encoding:gzip, deflate, br<br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.9</span>    语言<br>Cache-Control:max-age=<span class="hljs-number">0</span><br>Connection:keep-alive<br></code></pre></td></tr></table></figure><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul><li>方法、URL、HTTP版本</li><li>请求行中的请求方式：GET</li><li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="hljs-number">8</span>   GB2312  ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br></code></pre></td></tr></table></figure><h3 id="2-2-Http响应"><a href="#2-2-Http响应" class="headerlink" title="2.2  Http响应"></a>2.2  Http响应</h3><p>服务器到客户</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164427.png" alt="image-20210415092020569">百度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control:<span class="hljs-keyword">private</span>    缓存控制<br>Connection:Keep-Alive    连接<br>Content-Encoding:gzip    编码<br>Content-Type:text/html   类型<br></code></pre></td></tr></table></figure><h4 id="响应行（状态行）"><a href="#响应行（状态行）" class="headerlink" title="响应行（状态行）"></a>响应行（状态行）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="hljs-number">8</span>   GB2312  ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br>Refresh：告诉客户端，多久刷新一次；<br>Location：让网页重新定位；<br></code></pre></td></tr></table></figure><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>200：请求响应成功  200</p><p>3xx：请求重定向 </p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源   404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误   500       502:网关错误</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164431.png" alt="image-20210413180054878"></p><h2 id="3、Servlet"><a href="#3、Servlet" class="headerlink" title="3、Servlet"></a>3、Servlet</h2><h3 id="3-1-Servlet简介"><a href="#3-1-Servlet简介" class="headerlink" title="3.1  Servlet简介"></a>3.1  Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中。</li></ul></li><li>是用Java编写的服务器端程序，其主要功能在于交互式地浏览和修改数据，生成动态Web内容。</li><li>广义的Servlet是指任何实现了这个Servlet接口的类</li></ul><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510165924.png" alt="image-20210510165841659"></p><h3 id="3-2-你好Servlet！"><a href="#3-2-你好Servlet！" class="headerlink" title="3.2  你好Servlet！"></a>3.2  你好Servlet！</h3><ul><li>新建一个web项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164447.png" alt="image-20210420145500999"></p><ul><li>导入servlet的jar包</li><li>编写实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HellloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br><span class="hljs-comment">//一般会先把这两个放在开头</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//防止中文乱码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        PrintWriter writer = resp.getWriter();<br>        writer.print(<span class="hljs-string">&quot;Hello啊，树哥！&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>servlet映射，设置URL</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ocean.servlet.HellloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置服务器，推荐使用Tomcat 9</li></ul><h3 id="3-3-Servlet原理"><a href="#3-3-Servlet原理" class="headerlink" title="3.3  Servlet原理"></a>3.3  Servlet原理</h3><ul><li>客户端发送请求至服务器</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器</li><li>服务器将响应返回客户端</li></ul><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510170639.gif" alt="img"></p><p><strong>图片转载地址</strong>：<a href="https://blog.csdn.net/qq_19782019/article/details/80292110">JavaWeb  Servlet   扬俊的小屋-CSDN博客</a></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510171839" alt="img"></p><p><strong>图片转载地址</strong>：<a href="https://blog.csdn.net/qq_19782019/article/details/80292110">JavaWeb  Servlet   扬俊的小屋-CSDN博客</a></p><p><strong>源码：</strong></p><ul><li><code>GenericServlet</code> 没有实现 <code>servlet</code> 的 <code>service</code> 的方法，<code>HttpServlet</code> 实现了 <code>service</code>  方法。</li><li></li></ul><h3 id="3-4-Servlet的Mapping"><a href="#3-4-Servlet的Mapping" class="headerlink" title="3.4  Servlet的Mapping"></a>3.4  Servlet的Mapping</h3><p><strong>映射</strong>，记得大学的高数老师讲过函数映射的特点，就好比射箭，一对一，或者多对一（多个十环），但不可能是一对多</p><p><strong>使用URL映射servlet的实现类，可以一对多或者多对一</strong></p><ul><li>多个URL对应一个Servlet，反过来就是一个servlet对应对个servlet</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello001<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello002<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello003<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>一个Servlet可以指定通用映射路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>默认请求路径，通配符*</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>指定一些后缀或者前缀等等….</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射</span><br><span class="hljs-comment">    注意点，*前面不能加项目映射的路径</span><br><span class="hljs-comment">    hello/sajdlkajda.servlet</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-ServletContext"><a href="#3-5-ServletContext" class="headerlink" title="3.5  ServletContext"></a>3.5  ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><p>需要掌握的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164620.png" alt="image-20210421221335414"></p><ul><li><p>共享数据，</p><ul><li>上传到Context中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetToServletContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        String name=<span class="hljs-string">&quot;大海&quot;</span>;<br>        context.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>从Context下载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFromServletContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        String name = (String) context.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        PrintWriter writer = resp.getWriter();<br>        writer.print(name);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求转发</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDispatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        context.getRequestDispatcher(<span class="hljs-string">&quot;//para&quot;</span>).forward(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>读文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadResouse_db</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        InputStream inputStream = context.getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br><br><br>        Properties properties=<span class="hljs-keyword">new</span> Properties();<br>        properties.load(inputStream);<br>        String name = properties.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>        String pwd = properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        String age = properties.getProperty(<span class="hljs-string">&quot;age&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        resp.getWriter().print(<span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot;   年龄：&quot;</span>+age+<span class="hljs-string">&quot;   密码：&quot;</span>+pwd);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-HttpServletResponse与HttpServletRequest"><a href="#3-6-HttpServletResponse与HttpServletRequest" class="headerlink" title="3.6  HttpServletResponse与HttpServletRequest"></a>3.6  HttpServletResponse与HttpServletRequest</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><p> <strong>重定向与转发：</strong>思路，矛盾分析法，相同与不同</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化   307</li><li>重定向时候，url地址栏会发生变化； 302</li></ul><p>重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendRedirect</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.sendRedirect(<span class="hljs-string">&quot;/s2/para&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>resp常用方法</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164631.png" alt="image-20210421221618382"></p><p>req常用方法</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164634.png" alt="image-20210421221734665"></p><h2 id="4、Cookie与Session"><a href="#4、Cookie与Session" class="headerlink" title="4、Cookie与Session"></a>4、Cookie与Session</h2><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端              服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion（重点）</li></ol><h3 id="4-1-Cookie"><a href="#4-1-Cookie" class="headerlink" title="4.1  Cookie"></a>4.1  Cookie</h3><p><strong>cookie理论就两步</strong></p><ul><li><p>从请求中拿到cookie信息</p></li><li><p>服务器响应给客户端cookie</p></li></ul><p><strong>cookie的常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//获得Cookie</span><br>cookie.getName(); <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue(); <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>编码与解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie cookie02=<span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, URLEncoder.encode(<span class="hljs-string">&quot;我叫编码&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>));<span class="hljs-comment">//编码</span><br>out.write(URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;UTF-8&quot;</span>));<span class="hljs-comment">//解码</span><br></code></pre></td></tr></table></figure><h3 id="4-2-Session"><a href="#4-2-Session" class="headerlink" title="4.2  Session"></a>4.2  Session</h3><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164642.png" alt="1568344560794"></p><p><strong>什么是Session：</strong></p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li></ul><p><strong>Session和cookie的区别：</strong></p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>需要掌握的session方法;</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164713.png" alt="image-20210421100924749"></p><p>getServletContext()在后面会表示为application  </p><h2 id="5、JSP"><a href="#5、JSP" class="headerlink" title="5、JSP"></a>5、JSP</h2><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h3 id="5-1-JSP理论"><a href="#5-1-JSP理论" class="headerlink" title="5.1  JSP理论"></a>5.1  JSP理论</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录；</p><p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164727.png" alt="1568345873736"></p><p>我电脑的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C:\Users\Ocean4859\AppData\Local\JetBrains\IntelliJIdea2020<span class="hljs-number">.3</span>\tomcat\7991b1b9-<span class="hljs-number">0e87</span>-<span class="hljs-number">4490</span>-8fd4-6b4b8f8085ba\work\Catalina\localhost\s5\org\apache\jsp<br></code></pre></td></tr></table></figure><p>发现页面转变成了Java程序！</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164735.png" alt="1568345948307"></p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><h4 id="分析index-jsp-java文件"><a href="#分析index-jsp-java文件" class="headerlink" title="分析index_jsp.java文件"></a><strong>分析index_jsp.java文件</strong></h4><p><strong>JSP 本质上就是一个Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;<br>      <br>  &#125;<br><span class="hljs-comment">//销毁</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>  &#125;<br><span class="hljs-comment">//JSPService</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(.HttpServletRequest request,HttpServletResponse response)</span></span><br><span class="hljs-function">      </span><br></code></pre></td></tr></table></figure><ol><li><p>判断请求</p></li><li><p>内置一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="hljs-comment">//页面上下文</span><br>javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>;    <span class="hljs-comment">//session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;   <span class="hljs-comment">//applicationContext</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;         <span class="hljs-comment">//config</span><br>javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>;           <span class="hljs-comment">//out</span><br><span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>;               <span class="hljs-comment">//page：当前</span><br>HttpServletRequest request                        <span class="hljs-comment">//请求</span><br>HttpServletResponse response                      <span class="hljs-comment">//响应</span><br></code></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);       <span class="hljs-comment">//设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>                                          <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164815.png" alt="1568347078207"></p><p>在JSP页面中；</p><p>只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="5-2-JSP语法"><a href="#5-2-JSP语法" class="headerlink" title="5.2  JSP语法"></a>5.2  JSP语法</h3><p>在JSP，嵌入Java代码即可！</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%这里面是java代码%&gt;<br>&lt;%=变量名字或表达式%&gt;<br>&lt;%!外部声明%&gt;<br>&lt;%--jsp注释--%&gt;<br>JSP的注释，不会在客户端显示，HTML就会！<br></code></pre></td></tr></table></figure><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    &lt;%=变量或者表达式%&gt;<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> Date()%&gt;  <br></code></pre></td></tr></table></figure><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>    sum+=i;<br>&#125;<br>out.println(<span class="hljs-string">&quot;sun：&quot;</span>+sum);<br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>脚本片段中嵌套html</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;  %&gt;<br>&lt;h1&gt; &lt;%=i%&gt; 只羊 &lt;/h1&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>  <span class="hljs-keyword">static</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;外部变量&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> globalVar=<span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out01</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;发现新大陆&quot;</span>);<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><h3 id="5-3-JSP指令"><a href="#5-3-JSP指令" class="headerlink" title="5.3  JSP指令"></a>5.3  JSP指令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> args.... %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;&quot;</span>%&gt;<br><br>&lt;%--<span class="hljs-meta">@include</span>会将两个页面合二为一--%&gt;<br>  &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>  &lt;h1&gt;网页主体&lt;/h1&gt;<br>  &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>%&gt;<br>  &lt;hr&gt;<br><br>&lt;%--jSP标签<br>    jsp:include：拼接页面，本质还是三个<br>--%&gt;<br><br>  &lt;jsp:include page=&quot;common/header.jsp&quot;&gt;&lt;/jsp:include&gt;<br>  &lt;h1&gt;网页主体&lt;/h1&gt;<br>  &lt;jsp:include page=&quot;common/footer.jsp&quot;&gt;&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure><h3 id="5-4-9大内置对象"><a href="#5-4-9大内置对象" class="headerlink" title="5.4  9大内置对象"></a>5.4  9大内置对象</h3><ul><li>PageContext    存东西</li><li>Request     存东西</li><li>Response</li><li>Session      存东西</li><li>Application   【SerlvetContext】   存东西</li><li>config    【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;秦疆1号&quot;</span>); <span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;秦疆2号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;秦疆3号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;秦疆4号&quot;</span>);  <span class="hljs-comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br></code></pre></td></tr></table></figure><h4 id="简单应用场景"><a href="#简单应用场景" class="headerlink" title="简单应用场景"></a>简单应用场景</h4><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>  pageContext.setAttribute(<span class="hljs-string">&quot;child1&quot;</span>,<span class="hljs-string">&quot;大娃&quot;</span>);<br>  request.setAttribute(<span class="hljs-string">&quot;child2&quot;</span>,<span class="hljs-string">&quot;二娃&quot;</span>);<br>  session.setAttribute(<span class="hljs-string">&quot;child3&quot;</span>,<span class="hljs-string">&quot;三娃&quot;</span>);<br>  application.setAttribute(<span class="hljs-string">&quot;child4&quot;</span>,<span class="hljs-string">&quot;四娃&quot;</span>);<br>%&gt;<br><br>&lt;%<br>  String child1 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;child1&quot;</span>);<br>  String child2 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;child2&quot;</span>);<br>  String child3 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;child3&quot;</span>);<br>  String child4 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;child4&quot;</span>);<br>  String child5 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;child5&quot;</span>);<br><br>%&gt;<br><br>&lt;%--  使用el表达式输出  $&#123;&#125;&#125;--%&gt;<br>  &lt;h1&gt;$&#123;child1&#125;&lt;/h1&gt;<br>  &lt;h1&gt;$&#123;child2&#125;&lt;/h1&gt;<br>  &lt;h1&gt;$&#123;child3&#125;&lt;/h1&gt;<br>  &lt;h1&gt;$&#123;child4&#125;&lt;/h1&gt;<br>  &lt;h1&gt;$&#123;child5&#125;&lt;/h1&gt;不会显示null<br><br>  &lt;h1&gt;&lt;%=child5%&gt;&lt;/h1&gt;会显示null<br></code></pre></td></tr></table></figure><p>EL表达式：  ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong>，不能用的直接用&lt;%=变量或表达式%&gt;</li></ul><h2 id="6、Filter"><a href="#6、Filter" class="headerlink" title="6、Filter"></a>6、Filter</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li><li>***等祖安话</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164855.png" alt="image-20210426083126634"></p><p>implements选对Filter包</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510164902.png" alt="image-20210426083908415"></p><ul><li>监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFiter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFiter初始化&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-comment">//filterChain : 链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">    2. 必须要让过滤器继续同行</span><br><span class="hljs-comment">        chain.doFilter(request,response);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//doFilter方法让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁：web服务器关闭的时候，过滤会销毁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFiter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;Hello啊，树哥&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置servlet与filter</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ocean.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/show<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/show<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterfilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.ocean.filter.CharacterEncodingFiter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterfilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="技术积累"><a href="#技术积累" class="headerlink" title="技术积累"></a>技术积累</h1><p>学习方法：新手村–&gt;魔鬼训练(分析原理,看源码)–&gt;PK场</p><p>学习的方式最重要!学会学习!<br>有道无术、术尚可求。有术无道、止于术<br>真正的教学,授人以渔</p><h2 id="常见的linux命令"><a href="#常见的linux命令" class="headerlink" title="常见的linux命令"></a>常见的linux命令</h2><p>只要不报错就是执行成功了      linux里面一切皆文件   平时一定要多使用这些基础的命令! </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">1</span>)、<span class="hljs-built_in">cd</span>:改变目录。change directory     <span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> 新建文件夹/    支持<span class="hljs-built_in">cd</span>自动补全功能    开始先 <span class="hljs-built_in">cd</span> /<br><span class="hljs-number">2</span>)、<span class="hljs-built_in">cd</span>..回退到上一个目录,直接<span class="hljs-built_in">cd</span>进入默认目录<br><span class="hljs-number">3</span>)、<span class="hljs-built_in">pWd</span>:显示当前所在的目录路径。  Print Working Directory<br><span class="hljs-number">4</span>)、<span class="hljs-built_in">ls</span> <span class="hljs-literal">-ll</span> <span class="hljs-built_in">ls</span> <span class="hljs-literal">-al</span>(所有文件):都是列出当前目录中的所有文件,只不过ll两个列出的内容更为详细  list files<br><span class="hljs-number">5</span>)、touch :新建一个文件如 touch index.js就会在当前目录下新建一个 index.js文件。<br><span class="hljs-number">6</span>)、<span class="hljs-built_in">rm</span> 文件名:删除一个文件, <span class="hljs-built_in">rm</span> index. js就会把 Lindex. js文件删除。  remove<br><span class="hljs-number">7</span>)、mkdir 文件夹名;:新建一个目录就是新建一个文件夹。    make directory<br><span class="hljs-number">8</span>)、<span class="hljs-built_in">rm</span> <span class="hljs-literal">-r</span> :删除一个文件夹, <span class="hljs-built_in">rm</span> <span class="hljs-literal">-r</span> src删除src目录   <span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-r</span> file1/<br><span class="hljs-number">9</span>)、<span class="hljs-built_in">mv</span> 移动文件, <span class="hljs-built_in">mv</span> 移动的文件 src 是我们要移动的文件,src是目标文件夹当然,这样写,<br>夹在同一目录下。<br><span class="hljs-number">10</span>)、reset 重新初始化终端/清屏。<br><span class="hljs-number">11</span>)、<span class="hljs-built_in">clear</span> 清屏<br><span class="hljs-number">12</span>)、<span class="hljs-built_in">history</span> 查看命令历史<br><span class="hljs-number">13</span>)、help 帮助。<br><span class="hljs-number">14</span>)、<span class="hljs-keyword">exit</span> 退出。<br><span class="hljs-number">15</span>)、<span class="hljs-comment">#表示注释</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="/2021/01/02/spring/"/>
    <url>/2021/01/02/spring/</url>
    
    <content type="html"><![CDATA[<h1 id="一、学习内容"><a href="#一、学习内容" class="headerlink" title="一、学习内容"></a>一、学习内容</h1><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a><center>Spring</center></h1><h2 id="1、先入为主：Hello-Spring"><a href="#1、先入为主：Hello-Spring" class="headerlink" title="1、先入为主：Hello Spring"></a>1、先入为主：Hello Spring</h2><p><strong>目的：输出Hello Spring</strong></p><p>利用maven框架搭建spring项目，先培养对Spring一个感性认识。</p><p><strong>Maven：</strong></p><ul><li>项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</li><li>Maven是意第绪语，依地语（犹太人使用的国际语），表示专家的意思。</li><li><strong>导jar包。</strong></li></ul><blockquote><p>实例</p></blockquote><ul><li>新建总项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141102.png" alt="001"></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141109.png" alt="image-20210401214558830"></p><ul><li>导入pom.xml的依赖</li></ul><p>只需配置pom.xml，maven就可以帮我们自动加载我们需要的资源</p><p> spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们只需要配置最外层的pom.xml，我们内层项目会通过以下代码继承外层pom.xml的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ocean<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>初始化maven</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141136.bmp" alt="maven的使用"></p><p><strong>install报错：</strong>Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</p><p>解决办法：</p><p>需要在pom.xml文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>新建子项目</li></ul><p>在父项目上右击新建Maven项目</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141146.png" alt="image-20210401214804599"></p><p>Parent：指的是继承父项目pom.xml的配置</p><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141151.png" alt="image-20210401220834130"></p><ul><li>新建一个类</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hello Spring [doge]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Hello h =<span class="hljs-keyword">new</span> Hello();<br>        h.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hello</span> Spring<span class="hljs-meta"> [doge]</span><br></code></pre></td></tr></table></figure><blockquote><p>自学指南</p></blockquote><ul><li>官网：<a href="https://docs.spring.io/spring-framework/docs/5.2.0.RELEASE/spring-framework-reference/core.html#beans-factory-instantiation">Spring官方文档</a>    <a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java官方文档</a></li><li>优质视频：<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p">狂神说Java</a></li><li>视频配套笔记：<a href="https://blog.csdn.net/qq_33369905/article/details/105828924?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161803400916780271561835%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161803400916780271561835&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-105828924.nonecase&utm_term=ssm%E6%A1%86%E6%9E%B6">小狂神CSDN笔记</a></li><li>欢迎关注狂神<ul><li>微信公众号：狂神说</li><li>B站：遇见狂神说</li><li><a href="www.kuangstudy.com">狂神自学平台</a></li></ul></li></ul><h2 id="2、Spring到底是个啥"><a href="#2、Spring到底是个啥" class="headerlink" title="2、Spring到底是个啥"></a>2、Spring到底是个啥</h2><p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p><p><a href="https://docs.spring.io/spring-framework/docs/5.2.0.RELEASE/spring-framework-reference/core.html#beans-factory-instantiation">Spring官方文档</a></p><p><strong>Spring体系架构组成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141159.jpg" alt="spring体系架构"></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141203.jpg" alt="spring框架"></p><ul><li><strong>Spring Core：</strong> 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依赖注入功能。</li><li><strong>Spring Aspects</strong> ： 该模块为与AspectJ的集成提供支持。</li><li><strong>Spring AOP</strong> ：提供了面向切面的编程实现。</li><li><strong>Spring JDBC</strong> : Java数据库连接。</li><li><strong>Spring JMS</strong> ：Java消息服务。</li><li><strong>Spring ORM</strong> : 用于支持Hibernate等ORM工具。</li><li><strong>Spring Web</strong> : 为创建Web应用程序提供支持。</li><li><strong>Spring Test</strong> : 提供了对 JUnit 和 TestNG 测试的支持。</li></ul><p><strong>Spring Boot 与 Spring Cloud简介</strong></p><ul><li>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务;</li><li>Spring Cloud是基于Spring Boot实现的；</li></ul><h2 id="3、IoC：控制反转思想"><a href="#3、IoC：控制反转思想" class="headerlink" title="3、IoC：控制反转思想"></a>3、IoC：控制反转思想</h2><h3 id="3-1-IoC是一种设计思想"><a href="#3-1-IoC是一种设计思想" class="headerlink" title="3.1   IoC是一种设计思想"></a>3.1   IoC是一种设计思想</h3><p><strong>所谓的IoC,一句话搞定 : 对象由Spring 来创建 , 管理 , 装配 !</strong> </p><p><strong>我的理解：</strong></p><p>old：我们写一个程序，需要先写一个实体类（接口），然后通过方法 <strong>new</strong> 出一个对象，然后手动配置这个对象的成员属性，这个配置的过程是耦合性很高的实体类的源码中完成的，代码量大的时候，牵一发而动全身。</p><p>now：我们写一个程序，需要先写一个实体类（接口），利用IoC容器，不使用new方法，而是使用配置文件（或注解）来配置成员属性，不修改实体类的源码，耦合性大大降低。我们将原来的代码块解耦。</p><p>仔细思考这个过程，我们会发现：</p><p>old：程序撰写者来配置对象的生成以及其成员属性的配置；</p><p>now：调用者通过配置文件来配置成员属性，对象的生成有Spring提供的IoC容器来<strong>自动生成；</strong></p><p>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong></p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><p><strong>思考</strong>：（答案在文章末尾）</p><p>问题A：使用IoC后，对象是由谁创建的？</p><p>问题B：使用IoC后，对象的成员属性是怎么配置的？</p><p><strong>这个过程就叫控制反转 :</strong></p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</li></ul><p><strong>依赖注入</strong> : 就是利用set方法来进行注入的.</p><p> IOC是一种编程思想，由主动的编程变成被动的接收</p><h3 id="3-2-Spring配置"><a href="#3-2-Spring配置" class="headerlink" title="3.2   Spring配置"></a>3.2   Spring配置</h3><h4 id="3-2-1-简单的Spring配置"><a href="#3-2-1-简单的Spring配置" class="headerlink" title="3.2.1 简单的Spring配置"></a>3.2.1 简单的Spring配置</h4><p>先写一个类，然后在XML文件中配置，最后测试</p><blockquote><p><strong>实例</strong></p></blockquote><ul><li><strong>project</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141209.png" alt="image-20210401224559511"></p><ul><li><strong>创建实体类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello02</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello02</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造,Hello02被创建了&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结论：在配置文件加载的时候。其中管理的对象都已经初始化了！&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>xml配置bean</strong></li></ul><p><strong>bean就是java对象 , 由Spring创建和管理</strong></p><p>bean的初始化配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式1：无参构造注入数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.service.UserServiceImpl&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span><br><span class="hljs-comment">   如果配置id,又配置了name,那么name是别名</span><br><span class="hljs-comment">   name可以设置多个别名,可以用逗号,分号,空格隔开</span><br><span class="hljs-comment">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">class是bean的全限定名=包名+类名</span><br><span class="hljs-comment">--&gt;</span><br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       ref:引用Spring容器中创建好的对象</span><br><span class="hljs-comment">       value:具体的值，基本数据类型</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;useDaoMysqlImpl&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;002&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.Hello02&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式2：含参构造器注入数据：（执行测试）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.Hello&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第一种--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span>  /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hi01&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 第二种--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;22&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hi02&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 第三种--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hi03&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;33&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.Hello02&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>测试</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//加载容器中的组件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-comment">//从容器中取出对象</span><br>        Hello hello = (Hello) context.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>输出结果</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">无参构造,Hello02被创建了<br>结论：在配置文件加载的时候。其中管理的对象都已经初始化了！<br>Hello&#123;<span class="hljs-attribute">str</span>=<span class="hljs-string">&#x27;hi03&#x27;</span>, <span class="hljs-attribute">age</span>=33&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>结论</strong></li></ul><p>在配置文件加载的时候，其中管理的对象都已经初始化了，无论bean对象是否被使用，IoC容器在容器内就已经初始化bean对象了</p><h4 id="3-2-2-配置Bean的常用命令"><a href="#3-2-2-配置Bean的常用命令" class="headerlink" title="3.2.2   配置Bean的常用命令"></a>3.2.2   配置Bean的常用命令</h4><p><strong>bean内关键字</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141216.bmp" alt="bean内语法"></p><p>一般我们使用前两个</p><p>property：属性</p><p>constuctor：构造器</p><p><strong>bean外关键字</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141225.bmp" alt="bean外语法1"></p><p>import</p><ul><li>加载其他xml配置文件</li><li>可以组合使用配置文件，便于团队开发</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;services.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;resources/messageSource.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;/resources/themeSource.xml&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>alias: 设置别名 , 为bean设置别名 , 可以设置多个别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-DI注入"><a href="#3-3-DI注入" class="headerlink" title="3.3 DI注入"></a>3.3 DI注入</h3><p><strong>概念：</strong></p><ul><li>依赖注入（Dependency Injection,DI）。</li><li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</li></ul><h4 id="3-3-1-注入方式"><a href="#3-3-1-注入方式" class="headerlink" title="3.3.1    注入方式"></a>3.3.1    注入方式</h4><h5 id="Ⅰ-构造器注入："><a href="#Ⅰ-构造器注入：" class="headerlink" title="Ⅰ.构造器注入："></a><strong>Ⅰ.构造器注入：</strong></h5><p>详见3.2.1方式二的bean配置里面的含参构造器注入数据。</p><h5 id="Ⅱ-Set注入："><a href="#Ⅱ-Set注入：" class="headerlink" title="Ⅱ.Set注入："></a><strong>Ⅱ.Set注入：</strong></h5><figure class="highlight plain"><figcaption><span>a</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jav">public class Student &#123;<br>&#x2F;&#x2F;成员变量<br>    private String name;&#x2F;&#x2F;String<br>    private Adress adress;&#x2F;&#x2F;对象<br>    private String[] books;&#x2F;&#x2F;数组<br>    private List&lt;String&gt; hobbies;&#x2F;&#x2F;List集合<br>    private Map&lt;String,String&gt; card;&#x2F;&#x2F;Map集合<br>    private String girlFriend;&#x2F;&#x2F;String集合<br>    private Properties info;&#x2F;&#x2F;Properties对象<br>    <br>&#x2F;&#x2F;类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码<br>    &#x2F;&#x2F;构造器，get、set方法，toString()方法  <br>&#125;<br></code></pre></td></tr></table></figure><p>bean常用配置语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.Student&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;adress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;内蒙古&quot;</span>/&gt;</span><br>    <br><span class="hljs-comment">&lt;!--数组注入--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三体<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>玄奘西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>人生<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--List集合注入--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>敲代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看书<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳绳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--Map集合注入--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;中国银行&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;011111111&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;农村信用社&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;212345456&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--Properties对象注入--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;girlFriend&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>20210202<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Ⅲ-p命名和c命名注入："><a href="#Ⅲ-p命名和c命名注入：" class="headerlink" title="Ⅲ.p命名和c命名注入："></a><strong>Ⅲ.p命名和c命名注入：</strong></h5><p><strong>P命名空间注入 : 需要在头文件中加入约束文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;beans<br>       <span class="hljs-comment">&lt;!--导入约束--&gt;</span><br>       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br> <span class="hljs-comment">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法，不需要含参构造--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;李华&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>C命名空间注入 : 需要在头文件中加入约束文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;beans<br>       <span class="hljs-comment">&lt;!--导入约束--&gt;</span><br>       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br> <span class="hljs-comment">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法，还需要设置含参构造**--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;奥特曼&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;02&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-Bean作用域"><a href="#3-2-3-Bean作用域" class="headerlink" title="3.2.3 Bean作用域"></a>3.2.3 Bean作用域</h4><p><a href="https://blog.csdn.net/qq_35956041/article/details/81588160">bean的生命周期</a></p><p><strong>bean的作用域：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141235.png" alt="20160417164310654"></p><p><strong>singleton</strong>：单例类型 (默认类型)</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141255.bmp" alt="singleton"></p><p><strong>priototype</strong>：原型模式</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141301.bmp" alt="Prototype"></p><blockquote><p><strong>实例</strong></p></blockquote><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141309.png" alt="image-20210401230250441"></p><ul><li>实体类</li></ul><p>这个实例只用到了User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>beans.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user00&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;李华&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;12&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;李华&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.damo01.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;奥特曼&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;02&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>        User user01 = (User) context.getBean(<span class="hljs-string">&quot;user00&quot;</span>);<br>        User user02 = (User) context.getBean(<span class="hljs-string">&quot;user00&quot;</span>);<br>        User user03 = (User) context.getBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>        User user04 = (User) context.getBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>        User user05 = (User) context.getBean(<span class="hljs-string">&quot;user02&quot;</span>);<br>        User user06 = (User) context.getBean(<span class="hljs-string">&quot;user02&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;默认为：&quot;</span>+(user01 == user02));<br>        System.out.println(<span class="hljs-string">&quot;scope=singleton为：&quot;</span>+(user03 == user04));<br>        System.out.println(<span class="hljs-string">&quot;scope=prototype为：&quot;</span>+(user05 == user06));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d">默认为：<span class="hljs-literal">true</span><br><span class="hljs-keyword">scope</span>=singleton为：<span class="hljs-literal">true</span><br><span class="hljs-keyword">scope</span>=prototype为：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="3-4-自动装配"><a href="#3-4-自动装配" class="headerlink" title="3.4 自动装配"></a>3.4 自动装配</h3><p><strong>概念：</strong></p><ul><li>自动装配是使用spring满足bean依赖的一种方法</li><li>spring会在应用上下文中为某个bean寻找其依赖的bean。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ul><li><p>在xml中显式配置；</p></li><li><p>在java中显式配置；</p></li><li><p>隐式的bean发现机制和自动装配。（讲的是这个）</p></li></ul><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ul><li><p>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean；</p></li><li><p>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI；</p></li></ul><p>组件扫描和自动装配组合发挥巨大威力，使得显示的配置降低到最少。</p><p><strong>推荐不使用自动装配xml配置 , 而使用注解 .</strong></p><h4 id="3-4-1-xml配置实现自动装配"><a href="#3-4-1-xml配置实现自动装配" class="headerlink" title="3.4.1  xml配置实现自动装配"></a>3.4.1  xml配置实现自动装配</h4><p><strong>配置的方式</strong></p><p>通过设置bean中的属性autowire=”” 来实现</p><ul><li>autowire byType   (按类型自动装配)</li><li>autowire byName (按名称自动装配)</li></ul><blockquote><p><strong>实例</strong></p></blockquote><ul><li>新建实体类    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫猫爱吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗狗爱吃骨头&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.Cat&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--手动配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;man01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.People&quot;</span> &gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cat&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dog&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--自动配置byName方式--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;man_autowiredbyName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过名字：&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--自动配置byType方式--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;man_autowiredbyType&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过类型：&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-comment">//手动配置</span><br>        People man01 = (People) context.getBean(<span class="hljs-string">&quot;man01&quot;</span>);<br>        man01.getCat().eat();<br><span class="hljs-comment">//自动配置byName方式</span><br>        People man_autowiredbyName = (People) context.getBean(<span class="hljs-string">&quot;man_autowiredbyName&quot;</span>);<br>        System.out.println(man_autowiredbyName.getName());<br>        man_autowiredbyName.getDog().eat();<br><span class="hljs-comment">//自动配置byType方式</span><br>        People man_autowiredbyType = (People) context.getBean(<span class="hljs-string">&quot;man_autowiredbyName&quot;</span>);<br>        System.out.println(man_autowiredbyType.getName());<br>        man_autowiredbyName.getDog().eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile">猫猫爱吃鱼<br><span class="hljs-section">通过名字:</span><br>狗狗爱吃骨头<br><span class="hljs-section">通过名字:</span><br>狗狗爱吃骨头<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p></blockquote><p><strong>autowire byName (按名称自动装配)</strong></p><ul><li><p>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</p></li><li><p>去spring容器中寻找是否有此字符串名称id的对象。</p></li><li><p>如果有，就取出注入；如果没有，就报空指针异常。</p></li></ul><p><strong>autowire byType (按类型自动装配)</strong></p><ul><li>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。</li><li>如果不唯一，会报不唯一的异常。</li></ul><h4 id="3-4-2-使用注解实现自动装配"><a href="#3-4-2-使用注解实现自动装配" class="headerlink" title="3.4.2 使用注解实现自动装配"></a>3.4.2 使用注解实现自动装配</h4><p>使用注解之前需要配置xml文件信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">      xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>       http://www.springframework.org/schema/context<br>       https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;<br>&lt;--开启注解支持--&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>常用的自动配置注解</p></blockquote><p><strong>@Autowired</strong></p><ul><li><p>@Autowired是按类型自动转配的，不支持id匹配。</p></li><li><p>需要导入 spring-aop的包！</p></li><li><p>@Autowired(required=false)    false：对象可以为null；true：对象必须存对象，不能为null。</p></li></ul><p><strong>@Qualifier</strong></p><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li>@Qualifier不能单独使用。</li></ul><p><strong>@Resource</strong></p><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p><strong>@Nullable</strong></p><ul><li>字段标注了这个注解说明这个注解可以为null</li></ul><p><strong>@Autowired与@Resource异同：</strong></p><ul><li>@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</li><li>@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</li><li>@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li><li>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</li><li>不用写set方法也可以。</li></ul><blockquote><p>实例</p></blockquote><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141320.png" alt="image-20210401232401165"></p><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;dog2&quot;)</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value=&quot;cat&quot;)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫猫爱吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗狗爱吃骨头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--开启注解支持--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo02.Cat&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo02.Dog&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo02.Dog&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.pojo02.People&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean02.xml&quot;</span>);<br>        People man = (People) context.getBean(<span class="hljs-string">&quot;man&quot;</span>);<br>        man.getDog().eat();<br>        man.getCat().eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">狗狗爱吃骨头<br>猫猫爱吃鱼<br></code></pre></td></tr></table></figure><h3 id="3-5-注解"><a href="#3-5-注解" class="headerlink" title="3.5 注解"></a>3.5 注解</h3><p>注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><h4 id="3-5-1-spring注解"><a href="#3-5-1-spring注解" class="headerlink" title="3.5.1 spring注解"></a>3.5.1 spring注解</h4><p><strong>使用注解之前需要配置xml文件信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>http://www.springframework.org/schema/context<br>https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;<br><span class="hljs-comment">&lt;!--开启注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-comment">&lt;!--指定扫描的包，这个包下的注解就会生效--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ocean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141326.png" alt="image-20210424183406646"></p><blockquote><p>常用注解</p></blockquote><p><strong>@Component</strong></p><ul><li><p>相当于配置文件中 <bean id="user" class="当前注解的类"/></p></li><li><p>其id默认为类的小写，也可以在@Component之后加上（”id名字”）来配置id</p></li></ul><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><p>@Controller：web层</p><p>@Service：service层</p><p>@Repository：dao层</p><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><p><strong>@Value(“值”)</strong></p><ul><li><p>属性注入，直接在直接名上添加@value(“值”)</p></li><li><p>如果提供了set方法，在set方法上添加@value(“值”);</p></li></ul><p><strong>@scope</strong></p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><blockquote><p><strong>实例</strong></p></blockquote><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141331.png" alt="image-20210401233319513"></p><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;数据库&quot;)</span><br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;小洋&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置xml</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">   xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>    http:<span class="hljs-comment">//www.springframework.org/schema/context</span><br>    https:<span class="hljs-comment">//www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br>&lt;!--开启注解支持--&gt;<br>&lt;context:annotation-config/&gt;<br>&lt;!--指定扫描的包，这个包下的注解就会生效--&gt;<br>&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.ocean&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        User use01 = (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        UserDao use02 = (UserDao) context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        System.out.println(use01.getName());<br>        System.out.println(use02.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">小洋<br>数据库<br></code></pre></td></tr></table></figure><h4 id="3-5-2-Java注解"><a href="#3-5-2-Java注解" class="headerlink" title="3.5.2 Java注解"></a>3.5.2 Java注解</h4><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><blockquote><p>常用注解</p></blockquote><p><strong>@Configuration</strong></p><ul><li>代表一个配置类，相当于beans.xml</li><li>底层本质就是一个@Component</li></ul><p><strong>@Component</strong></p><ul><li><p>相当于配置文件中 <bean id="user" class="当前注解的类"/></p></li><li><p>其id默认为类的小写，也可以在@Component之后加上（”id名字”）来配置id</p></li></ul><p><strong>@ComponentScan(“com.ocean.damo01”)</strong></p><ul><li>指定扫描的包</li></ul><p><strong>@Import(OceanConfig02.class)</strong></p><ul><li>嵌套其他配置类，相当于<import resource="OceanConfig02.xml"/></li></ul><p><strong>@Bean(“config02”)</strong></p><ul><li>相当于.xml配置文件中的bean对象</li><li>id为config02</li><li>默认，id=方法名，class=方法的返回值，<bean id="getUser" class="com.ocean.pojo.User"/></li></ul><blockquote><p>实例   </p></blockquote><p><strong>目的：在不使用xml文件的情况下，只使用注解的情况下，完成对象的创建和属性的注入</strong></p><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141336.png" alt="image-20210401204438563"></p><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//代表一个配置类，相当于beans.xml</span><br><span class="hljs-comment">//@ComponentScan(&quot;com.ocean.damo01&quot;)</span><br><span class="hljs-meta">@Import(OceanConfig02.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OceanConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//相当于.xml配置文件中，方法名=id，返回值=class</span><br>    <span class="hljs-comment">//&lt;bean id=&quot;getUser&quot; class=&quot;com.ocean.pojo.User&quot;/&gt;</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component()</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;天哥&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> OceanConfig02 &#123;<br>    @Bean(&quot;config02&quot;)<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser()&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;配置二：&quot;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>xml配置</li></ul><p>无</p><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//相当于加载bean.xml文件，OceanConfig.class配置类</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(OceanConfig.class);<br>        <span class="hljs-comment">//从IoC容器中取出Bean</span><br>        User getUser = (User) context.getBean(<span class="hljs-string">&quot;getUser&quot;</span>);<br>        User config02 = (User) context.getBean(<span class="hljs-string">&quot;config02&quot;</span>);<br>        System.out.println(getUser.getName());<br>        System.out.println(config02.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">执行配置二<br>天哥<br>天哥<br></code></pre></td></tr></table></figure><h2 id="4、AOP"><a href="#4、AOP" class="headerlink" title="4、AOP"></a>4、AOP</h2><p><strong>AOP</strong></p><ul><li>面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li><li>AOP是OOP的延续，</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低</li><li>提高程序的可重用性，同时提高了开发的效率。</li></ul><h3 id="4-1-代理模式"><a href="#4-1-代理模式" class="headerlink" title="4.1  代理模式"></a>4.1  代理模式</h3><p>AOP的底层机制就是动态代理！</p><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p>什么是代理模式？代理在百度解释里面的意思：<strong>暂时代人担任 某单位的负责职务</strong>，因此显然意见，被代理者的功能代理者都需要拥有。同时使用者直接面对的是代理者而不是具体的被代理者。</p><h4 id="4-1-1-静态代理"><a href="#4-1-1-静态代理" class="headerlink" title="4.1.1  静态代理"></a>4.1.1  静态代理</h4><p><strong>静态代理角色分析</strong></p><ul><li>抽象角色 : 一般使用接口或者抽象类来实现</li><li>真实角色 : 被代理的角色</li><li>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</li><li>客户  :  使用代理角色来进行一些操作 .</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141342.png" alt="image-20210423183746204"></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510141346.png" alt="image-20210423184229444"></p><h5 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h5><ul><li>抽象角色：接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>真实角色：房东</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理角色：房东</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-comment">//预留接口</span><br>    <span class="hljs-keyword">private</span> Host host;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//写set方法，可以配置接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-comment">//实现基本功能：租房子</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        host.rent();<br>        seeHouse();<br>        fare();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东带你看房！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东收房租&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>顾客</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*代码步骤：</span><br><span class="hljs-comment">        1.接口</span><br><span class="hljs-comment">        2.真实角色</span><br><span class="hljs-comment">        3.代理角色</span><br><span class="hljs-comment">        4.客户端访问代理角色</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//房东</span><br>        Host host=<span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">//代理</span><br>        Proxy proxy=<span class="hljs-keyword">new</span> Proxy();<br>        <span class="hljs-comment">//代理接管房东的出租请求</span><br>        proxy.setHost(host);<br>        <span class="hljs-comment">//顾客找代理租房</span><br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="日志功能实现"><a href="#日志功能实现" class="headerlink" title="日志功能实现"></a>日志功能实现</h5><ul><li>抽象角色：接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>真实角色：增删改查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理角色：在增删改查的基础上实现日志功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;add&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;delete&quot;</span>);<br>        userService.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;update&quot;</span>);<br>        userService.update();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;query&quot;</span>);<br>        userService.query();<br>    &#125;<br>    <span class="hljs-comment">//日志方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[Debug]使用了&quot;</span> + msg + <span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>客户</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*代码步骤：</span><br><span class="hljs-comment">        1.接口</span><br><span class="hljs-comment">        2.真实角色</span><br><span class="hljs-comment">        3.代理角色(动态生成的)</span><br><span class="hljs-comment">        4.客户端访问代理角色</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//2.真实角色</span><br>        Host host=<span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">//3.代理角色</span><br>        <span class="hljs-comment">//Proxy proxy=new Proxy();静态代理是预先写好代理类</span><br>        ProxyInvocationHandler pit=<span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>        pit.setRent(host);<br>        Rent proxy = (Rent) pit.getProxy();<br>        <span class="hljs-comment">//这里的proxy就是动态生成的</span><br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li></ul><h4 id="4-2-2-动态代理"><a href="#4-2-2-动态代理" class="headerlink" title="4.2.2  动态代理"></a>4.2.2  动态代理</h4><p>静态代理的缺点 :</p><ul><li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p><ul><li><p>动态代理的角色和静态代理的一样 .</p></li><li><p>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的</p></li><li><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p></li><li><ul><li>基于接口的动态代理—-JDK动态代理</li><li>基于类的动态代理–cglib</li><li>这里使用JDK的原生代码来实现，其余的道理都是一样的！、</li></ul></li></ul><p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！</strong></p><p><strong>JDK的动态代理需要了解两个类</strong></p><p>核心 : InvocationHandler 和 Proxy</p><ul><li>Proxy</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510142452.png" alt="image-20210423173337705"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">InvocationHandler handler = <span class="hljs-keyword">new</span> MyInvocationHandler(...);<br>Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),<br>                                     <span class="hljs-keyword">new</span> Class&lt;?&gt;[] &#123; Foo.class &#125;,<br>                                     handler);<br></code></pre></td></tr></table></figure><ul><li><strong>InvocationHandler</strong>:调用处理程序</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510142510.png" alt="image-20210423173020547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Object invoke​(Object proxy,<br> Method method,<br> Object[] args)<br>       <span class="hljs-keyword">throws</span> Throwable<br></code></pre></td></tr></table></figure><h5 id="简单实现-1"><a href="#简单实现-1" class="headerlink" title="简单实现"></a>简单实现</h5><ul><li>抽象角色：接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理生成类：动态生成代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br><span class="hljs-comment">//    InvocationHandler handler = new MyInvocationHandler(...);</span><br><span class="hljs-comment">//    Foo是</span><br><span class="hljs-comment">//    Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),</span><br><span class="hljs-comment">//            new Class&lt;?&gt;[] &#123; Foo.class &#125;反射接口,</span><br><span class="hljs-comment">//            handler);</span><br>    <span class="hljs-comment">//被代理的接口</span><br>    <span class="hljs-keyword">private</span> Rent rent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRent</span><span class="hljs-params">(Rent rent)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rent = rent;<br>    &#125;<br><br>    <span class="hljs-comment">//newProxyInstance：new一个代理实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),<br>                rent.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>    &#125;<br><br><span class="hljs-comment">/*  处理代理实例，并返回结果</span><br><span class="hljs-comment">    每一个动态代理类的调用处理程序都必须实现InvocationHandler接口，</span><br><span class="hljs-comment">    并且每个代理类的实例都关联到了实现该接口的动态代理类调用处理程序中，</span><br><span class="hljs-comment">    当我们通过动态代理对象调用一个方法时候，</span><br><span class="hljs-comment">    这个方法的调用就会被转发到实现InvocationHandler接口类的invoke方法来调用，</span><br><span class="hljs-comment">    我的理解：getProxy()方法中的h:this就是InvocationHandler，它会自动加载invoke，</span><br><span class="hljs-comment">    所以我们把代理方法写在invoke中即可</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        seeHouse();<br>        fare();<br>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span><br>        Object result = method.invoke(rent, args);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带你看房子&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;收房租&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>真实角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*代码步骤：</span><br><span class="hljs-comment">        1.接口</span><br><span class="hljs-comment">        2.真实角色</span><br><span class="hljs-comment">        3.代理角色(动态生成的)</span><br><span class="hljs-comment">        4.客户端访问代理角色</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//2.真实角色</span><br>        Host host=<span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">//3.代理角色</span><br>        <span class="hljs-comment">//Proxy proxy=new Proxy();静态代理是预先写好代理类</span><br>        ProxyInvocationHandler pit=<span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>        pit.setRent(host);<br>        Rent proxy = (Rent) pit.getProxy();<br>        <span class="hljs-comment">//这里的proxy就是动态生成的</span><br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="日志功能实现-1"><a href="#日志功能实现-1" class="headerlink" title="日志功能实现"></a>日志功能实现</h5><ul><li>抽象角色：接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>真实角色:增删改查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理生成类：动态生成代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br><span class="hljs-comment">//    InvocationHandler handler = new MyInvocationHandler(...);</span><br><span class="hljs-comment">//    Foo是</span><br><span class="hljs-comment">//    Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),</span><br><span class="hljs-comment">//            new Class&lt;?&gt;[] &#123; Foo.class &#125;反射接口,</span><br><span class="hljs-comment">//            handler);</span><br>    <span class="hljs-comment">//被代理的接口</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// newProxyInstance：new一个代理对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),<br>               target.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//处理代理实例，并返回结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span><br>        log(method.getName());<br>        Object result = method.invoke(target, args);<br>        <span class="hljs-comment">//代理实例的方法</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[Debug]使用了&quot;</span> + msg + <span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>顾客</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*代码步骤：</span><br><span class="hljs-comment">        1.接口</span><br><span class="hljs-comment">        2.真实角色</span><br><span class="hljs-comment">        3.代理角色</span><br><span class="hljs-comment">        4.客户端访问代理角色</span><br><span class="hljs-comment">         */</span><br><br><span class="hljs-comment">//        1.接口:UserService</span><br><br><span class="hljs-comment">//        2.真实角色</span><br>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><span class="hljs-comment">//        3.代理角色</span><br>        ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>        pih.setTarget(userService);<br>        UserService proxy = (UserService) pih.getProxy();<br>        <span class="hljs-comment">//上面这三行代码实现的事情：给我一个真实角色，我给你一个代理角色（经过我们修改的）</span><br>        <span class="hljs-comment">//过程：3.1 new一个ProxyInvocationHandler，3.2 传入参数userService  3.3 生成代理对象</span><br><span class="hljs-comment">//        4.客户端访问代理角色</span><br>        proxy.delete();<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><h5 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="动态代理的好处"></a>动态代理的好处</h5></blockquote><p>静态代理有的它都有，静态代理没有的，它也有！</p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li><li>一个动态代理 , 一般代理某一类业务</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><p>我给动态代理类一个接口，动态代理类给我一个代理类对象（aop改造后的）</p><h3 id="4-2-Aop"><a href="#4-2-Aop" class="headerlink" title="4.2  Aop"></a>4.2  Aop</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--aop织入包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提供声明式事务；允许用户自定义切面</p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。例如：Log类；</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。例如：Log中的方法；</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510142518.png" alt="640 -0" style="zoom:150%;" /><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法方法前</td><td>org. springframework aop. MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org. springframework aop. AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org. aopalliance. intercept. MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org. springframework aop Throws Advice</td></tr><tr><td>引介通知</td><td>类中增加的新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><blockquote><p>实例</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510142534.png" alt="image-20210424172232219"></p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserSerivce</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>目标对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserSerivce</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了add方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了delete方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了update方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了select方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注册bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.service.UserServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//动态代理代理的是接口，proxy代理类对象</span><br>        UserSerivce proxy = (UserSerivce) context.getBean(<span class="hljs-string">&quot;UserServiceImpl&quot;</span>);<br>        proxy.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现方式一：使用原生的Spring-API接口"><a href="#实现方式一：使用原生的Spring-API接口" class="headerlink" title="实现方式一：使用原生的Spring API接口"></a>实现方式一：使用原生的Spring API接口</h4><ul><li>切面和通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeforeLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;<br><br>    <span class="hljs-comment">//method : 要执行的目标对象的方法</span><br>    <span class="hljs-comment">//objects : 被调用的方法的参数</span><br>    <span class="hljs-comment">//Object : 目标对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] args,Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(target.getClass().getName()+<span class="hljs-string">&quot;的&quot;</span>+method.getName()+<span class="hljs-string">&quot;方法被执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>&#123;<br>   <br>   <span class="hljs-comment">//returnValue 返回值</span><br>    <span class="hljs-comment">//method被调用的方法</span><br>    <span class="hljs-comment">//args 被调用的方法的对象的参数</span><br>    <span class="hljs-comment">//target 被调用的目标对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(method.getName()+<span class="hljs-string">&quot;方法被带调用，返回值为：&quot;</span>+returnValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注册bean</li><li>使用原生的Spring API接口</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BeforeLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.log.BeforeLog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;AfterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.log.AfterLog&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--方式一：使用原生的Spring API接口--&gt;</span><br><span class="hljs-comment">&lt;!--配置aop:需要导入aop的约束--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--execution(要执行的位置，   修饰词，返回值，类名，方法名*，参数..)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut01&quot;</span> <span class="hljs-attr">expression</span>=</span><br><span class="hljs-tag">            &quot;<span class="hljs-attr">execution</span>(* <span class="hljs-attr">com.ocean.service.UserServiceImpl.</span>*(<span class="hljs-attr">..</span>))&quot;/&gt;</span><br>    <span class="hljs-comment">&lt;!--执行环绕增强--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;AfterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut01&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;BeforeLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut01&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">com</span>.ocean.service.UserServiceImpl的<span class="hljs-keyword">add</span>方法被执行<br>执行了<span class="hljs-keyword">add</span>方法<br><span class="hljs-keyword">add</span>方法被带调用，返回值为：null<br></code></pre></td></tr></table></figure><h4 id="实现方式二：自定义类实现aop"><a href="#实现方式二：自定义类实现aop" class="headerlink" title="实现方式二：自定义类实现aop"></a>实现方式二：自定义类实现aop</h4><ul><li>切面和通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Diy01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">diyBefore</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义类：方法执行前&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">diyAfter</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义类：方法执行后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定义类实现aop</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Diy01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.diy.Diy01&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--方式二：自定义类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> &gt;</span><br>    <span class="hljs-comment">&lt;!--自定义切面，ref是要引用的类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Diy01&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointdiy1&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.ocean.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--通知--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;diyBefore&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointdiy1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;diyAfter&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointdiy1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">自定义类：方法执行前<br>执行了<span class="hljs-keyword">add</span>方法<br>自定义类：方法执行后<br></code></pre></td></tr></table></figure><h4 id="实现方式三：注解实现aop"><a href="#实现方式三：注解实现aop" class="headerlink" title="实现方式三：注解实现aop"></a>实现方式三：注解实现aop</h4><ul><li>切面和通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* com.ocean.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AnnoBefore</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;注解实现类：方法执行前&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;execution(* com.ocean.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AnnoAfter</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;注解实现类：方法执行后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>开启注解支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启ioc注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-comment">&lt;!--开启aop注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">注解实现类：方法执行前<br>执行了<span class="hljs-keyword">add</span>方法<br>注解实现类：方法执行后<br></code></pre></td></tr></table></figure><h1 id="二、遇到的的问题及解决方案"><a href="#二、遇到的的问题及解决方案" class="headerlink" title="二、遇到的的问题及解决方案"></a>二、遇到的的问题及解决方案</h1><ul><li>配置beans时，程序各种爆红</li><li>遇到bug，先尝试自己去阅读这个报错的地方，思考十几秒，如果还不会，直接百度（CSDN）。之后总结一下这个bug的原因</li><li>写博客笔记的思路</li><li>学习技术的步骤，思路</li><li>注释总是左对齐问题：<a href="https://blog.csdn.net/weixin_44737877/article/details/99892442">https://blog.csdn.net/weixin_44737877/article/details/99892442</a></li></ul><h1 id="三、收获"><a href="#三、收获" class="headerlink" title="三、收获"></a>三、收获</h1><ul><li>学会利用官网进行学习</li><li>当我们遇到一个bug苦苦解决不了的时候真的好痛苦</li><li>当我们解决了这个苦苦解决不了的bug时，真的好开心</li></ul><p>问题A：使用IoC后，对象是由谁创建的？</p><p>答案：Spring提供的IoC容器自动创建的。对象是在配置文件加载的时候初始化的。</p><p>问题B：使用IoC后，对象的成员属性是怎么配置的？</p><p>答案：是由配置文件配置的。具体的话，一般是通过xml或者yaml等配置文件配置的。</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510142549.gif" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>官方文档</title>
    <link href="/2020/12/26/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    <url>/2020/12/26/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="常用官网"><a href="#常用官网" class="headerlink" title="常用官网"></a><center>常用官网</center></h1><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java 8 官方文档</a></p><p><a href="https://mvnrepository.com/">maven仓库</a></p><p><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis文档</a></p><p><a href="http://mybatis.org/spring/zh/index.html">Mybatis-spring</a></p><p><a href="https://spring.io/">Spring官网</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans">Spring官方文档</a></p><p><a href="https://docs.spring.io/spring-framework/docs/5.2.0.RELEASE/spring-framework-reference/web.html#mvc">SpringMVC官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="/2020/11/26/MyBatis/"/>
    <url>/2020/11/26/MyBatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MyBatis是个啥？"><a href="#1、MyBatis是个啥？" class="headerlink" title="1、MyBatis是个啥？"></a>1、MyBatis是个啥？</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1  什么是Mybatis"></a>1.1  什么是Mybatis</h3><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/1569633932712.png" alt="1569633932712"></p><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持定制化 SQL、存储过程以及高级映射。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到Github。</li></ul><p>如何获得Mybatis？</p><ul><li><p>maven仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2   持久化"></a>1.2   持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库(Jdbc)，io文件持久化。</li><li>生活：冷藏. 罐头。</li></ul><p><strong>为什么需要需要持久化？</strong></p><ul><li><p>有一些对象，不能让他丢掉。</p></li><li><p>内存太贵了</p></li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3  持久层"></a>1.3  持久层</h3><p>Dao层，Service层，Controller层….</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显。</li></ul><h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4  为什么需要Mybatis？"></a>1.4  为什么需要Mybatis？</h3><ul><li>帮助程序猿将数据存入到数据库中。</li><li>方便</li><li>传统的JDBC代码太复杂了。简化。框架。自动化。</li><li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li><li>优点：<ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><p><strong>最重要的一点：使用的人多！</strong></p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p><strong>Sqlsession完全包含了面向数据库执行sQL命令所需的所有方法</strong></p><h3 id="2-1-实例"><a href="#2-1-实例" class="headerlink" title="2.1  实例"></a>2.1  实例</h3><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210410134600727.png" alt="image-20210410134600727"></p><ul><li>建立数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `<span class="hljs-keyword">user</span>`(`id`,`name`,`pwd`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;小洋&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;abcdef&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;987654&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210422151417418.png" alt="image-20210422151417418"></p><ul><li>新建一个普通maven项目</li><li>通过mavenl导入mybatis和mysql-connector-java包，在最外层的pom.xml中添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>&lt;--使用utf-8编码方式--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>写一个实体类User，与数据库表中的数据类型对应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><span class="hljs-comment">//类中都写了以下方法，但是为了文章的简洁性，不再复制以下方法的代码</span><br>    <span class="hljs-comment">//构造器，get、set方法，toString()方法</span><br>&#125; <br></code></pre></td></tr></table></figure><ul><li>配置mybatis-config.xml，mybatis的配置，连接数据库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>&lt;！--选择开发环境--&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>&lt;！--配置一个环境--&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>&lt;！--数据库链接系统选择JDBC--&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>&lt;！--使用池化技术--&gt;<br>                &lt;--配置数据库连接的参数--&gt;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=false<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过官方文档来获得SqlSession对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String resource = <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;<br>InputStream inputStream = Resources.getResourceAsStream(resource);<br>SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br></code></pre></td></tr></table></figure><p>我们将其抽象为一个类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//官网源码，目的：sqlSessionFactory对象，然后在通过其创建sqlSession对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回SqlSession</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写Mapper接口类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置UseMapper.xml，来编写sql语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span>?xml version<span class="hljs-operator">=</span>&quot;1.0&quot; encoding<span class="hljs-operator">=</span>&quot;UTF-8&quot; ?<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span>DOCTYPE mapper<br>        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--nameplace用来绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-operator">&lt;</span>mapper namespace<span class="hljs-operator">=</span>&quot;com.ocean.dao.UserMapper&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--    id为Dao接口的方法名,实际上这个select重写了这个接口的getUserList方法--&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;getUserList&quot; resultType<span class="hljs-operator">=</span>&quot;com.ocean.pojo.User&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--查询语句--&gt;</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mybatis.user<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>mapper<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编写测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSelect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//获得sqlSession</span><br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>            List&lt;User&gt; userList = mapper.getUserList();<br>            <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>                System.out.println(user);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭sqlSession</span><br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">User&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小洋&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;abcdef&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;987654&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-技术积累"><a href="#2-2-技术积累" class="headerlink" title="2.2  技术积累"></a>2.2  技术积累</h3><p>sqlSession的常见sql语句</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510140838.png" alt="image-20210409194424917"></p><p>配置文件实现sql语句</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-vgbngdsbh.png" alt="image-20210409194241351"></p><p>配置文件的sql语句返回值类型</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210409195228697.png" alt="image-20210409195228697"></p><p>常见错误：Exception in thread “main” org.apache.ibatis.binding.BindingException: Type interface com.ocean.dao.UserDao is not known to the MapperRegistry. </p><p>MapperRegistry：核心配置文件中注册 mappers</p><p>解决方案：在外层pom.xml中插入以下代码</p><p>本质：使在src/main/java和src/main/resources目录下的.xml文件能够加载到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用@Test需要先使用maven导入junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最常使用maven的clean,来清理缓存</p><h3 id="2-3-个人总结：搭建项目的思路"><a href="#2-3-个人总结：搭建项目的思路" class="headerlink" title="2.3  个人总结：搭建项目的思路"></a>2.3  个人总结：搭建项目的思路</h3><p><strong>我的理解：注意…Mapper.xml里面的<CURD id="方法名">sql语句</CURD>实际上是重写接口的方法。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210423114530822.png" alt="image-20210423114530822"></p><p><strong>搭建项目思路：</strong></p><ul><li>pom.xml：导入依赖</li><li>utils：根据官网编写MybatisUtilis初始化文件，用来简化JDBC</li><li>连接数据库：配置db.properties和mybatis-config.xml</li><li>pojo：根据数据库编写实体类成员属性</li><li>编写实体类对应的Mapper接口和Mapper.xml文件<ul><li>dao：接口的方法</li><li>StudentMapper.xml和TeacherMapper.xml：实现接口的方法，完成实体类的成员属性与数据库字段的匹配；          将xml加入mybatis-config.xml文件中</li></ul></li><li>测试：利用MybatisUtilis读取mybatis-config.xml，进而加载StudentMapper.xml和TeacherMapper.xml到Mapper中，Mapper会重写接口的方法（也就是我们在xml中编写的sql语句），然后利用Mapper生成子类实现接口，然后实现接口重写的方法，将数据库的数据注入到我们的实体类中。</li><li>我们通过这一系列操作，把数据库中的数据拿出来给了我们实例化的对象</li></ul><p>简单步骤：</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p></li><li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p></li></ol><h2 id="3、Mybatis实现CRUD"><a href="#3、Mybatis实现CRUD" class="headerlink" title="3、Mybatis实现CRUD"></a>3、Mybatis实现CRUD</h2><p><strong>注意点：</strong></p><ul><li><p><strong>增、删、改操作需要提交事务！</strong></p></li><li><p><strong>增、删、改的返回值int</strong></p></li><li><p><strong>查的返回值User对象</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">session.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>session.close();<br></code></pre></td></tr></table></figure><h3 id="3-1-Select"><a href="#3-1-Select" class="headerlink" title="3.1  Select"></a>3.1  Select</h3><ul><li>在UserMapper接口中，添加方法，设置返回值类型和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//根据id查询用户</span><br>    <span class="hljs-function">User <span class="hljs-title">selectUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置UserMapper.xml，根据Id查询用户</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span>&gt;</span><br>    select * from user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        User user = mapper.selectUserById(<span class="hljs-number">1</span>);<span class="hljs-comment">//查询id为1的人的信息</span><br>        System.out.println(user.toString());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">User&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小洋&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Insert"><a href="#3-2-Insert" class="headerlink" title="3.2  Insert"></a>3.2  Insert</h3><ul><li>在UserMapper接口中，添加方法，设置返回值类型和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//添加用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置UserMapper.xml，设置插入数据是需要传入的参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span>&gt;</span><br>    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert01</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;小马&quot;</span>, <span class="hljs-string">&quot;654321&quot;</span>);<br>        <span class="hljs-keyword">int</span> i = mapper.insert(user);<br>        System.out.println(i);<br>        System.out.println(user);<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1<br>User&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小马&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;654321&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Update"><a href="#3-3-Update" class="headerlink" title="3.3  Update"></a>3.3  Update</h3><ul><li>在UserMapper接口中，添加方法，设置返回值类型和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//根据id查询用户</span><br>    <span class="hljs-function">User <span class="hljs-title">selectUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updata</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置UserMapper.xml，根据Id修改用户的name和pwd</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updata&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span>&gt;</span><br>    update user set name =#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update01</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-comment">//先根据id把user对象找到</span><br>        User user = mapper.selectUserById(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">//改值，不改id</span><br>        user.setName(<span class="hljs-string">&quot;小海&quot;</span>);<br>        user.setPwd(<span class="hljs-string">&quot;666666&quot;</span>);<br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-keyword">int</span> i = mapper.updata(user);<br>        System.out.println(i);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1<br>User&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小海&#x27;</span>, <span class="hljs-attribute">pwd</span>=<span class="hljs-string">&#x27;666666&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-Delect"><a href="#3-4-Delect" class="headerlink" title="3.4  Delect"></a>3.4  Delect</h3><ul><li>在UserMapper接口中，添加方法，设置返回值类型和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//根据id删除用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置UserMapper.xml，根据Id删除用户</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delect&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delect01</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-keyword">int</span> i = mapper.delect(<span class="hljs-number">4</span>);<br>        System.out.println(i);<br>        System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br><br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">1<br>删除成功！<br></code></pre></td></tr></table></figure><h3 id="3-5-万能的Map"><a href="#3-5-万能的Map" class="headerlink" title="3.5  万能的Map"></a>3.5  万能的Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多</p><p><strong>在创建一个对象的时候，我们只想插入部分参数，而不是全部，我们应当考虑使用Map！</strong></p><p><strong>本质：利用Map来传部分参数</strong></p><ul><li>在UserMapper接口中，添加方法，设置返回值类型和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertMap</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>配置UserMapper.xml，可以只传入部分参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into user (id,name, pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;passWord&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertMap</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">int</span> i = mapper.insertMap(map);<br>        System.out.println(i);<br><br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/image-20210410165125481.png" alt="image-20210410165125481"></p><ul><li>小结</li></ul><p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到！不需要写返回值</p><p>多个参数用Map，<strong>或者注解！</strong></p><h3 id="3-6-两种模糊查询的方式"><a href="#3-6-两种模糊查询的方式" class="headerlink" title="3.6  两种模糊查询的方式"></a>3.6  两种模糊查询的方式</h3><p>模糊查询怎么写？</p><ul><li>Java代码执行的时候，传递通配符 % %</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>在sql拼接中使用通配符！</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br></code></pre></td></tr></table></figure><h3 id="3-7-技术积累"><a href="#3-7-技术积累" class="headerlink" title="3.7  技术积累"></a>3.7  技术积累</h3><p>我们可以先写出方法名，然后点击左侧绿色箭头自动在Mapper.xml中生成对应的bean对象</p><p>这款插件叫<strong>Free Mybatis plugin</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163735.gif" alt="动画"></p><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1  核心配置文件"></a>4.1  核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>&lt;！--选择默认的开发环境，可以配置多套开发环境--&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>&lt;！--配置一个环境--&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>&lt;！--数据库链接系统选择JDBC--&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>&lt;！--使用池化技术--&gt;<br>                &lt;--配置数据库连接的参数--&gt;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=false<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;9789&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2  环境配置（environments）"></a>4.2  环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境！</p><p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p><h3 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3  属性（properties）"></a>4.3  属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p><p>编写外部配置文件db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的！</li></ul><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4  类型别名（typeAliases）"></a>4.4  类型别名（typeAliases）</h3><ul><li>类型别名是为 Java 类型设置一个短的名字。</li><li>存在的意义仅在于用来减少类完全限定名的冗余。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以指定一个包名，<strong>MyBatis 会在包名下面搜索需要的 Java Bean</strong>，比如：</p><p>扫描实体类的包，它的默认别名就为这个类的类名，首字母小写！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-设置"><a href="#4-5-设置" class="headerlink" title="4.5 设置"></a>4.5 设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163814.png" alt="1569657659080"></p><p><img src="MyBatis.assets/1569657672791.png" alt="1569657672791"></p><h3 id="4-6-其他设置"><a href="#4-6-其他设置" class="headerlink" title="4.6  其他设置"></a>4.6  其他设置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li>plugins插件<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="4-7-映射器（Mappers）"><a href="#4-7-映射器（Mappers）" class="headerlink" title="4.7  映射器（Mappers）"></a>4.7  映射器（Mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ocean/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用第二种的注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><h3 id="4-8-生存周期与作用域"><a href="#4-8-生存周期与作用域" class="headerlink" title="4.8  生存周期与作用域"></a>4.8  生存周期与作用域</h3><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder</strong></p><ul><li>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。</li></ul><p><strong>SqlSessionFactory</strong></p><ul><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>每个线程都应该有它自己的 SqlSession 实例。</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//官网源码，目的：sqlSessionFactory对象，然后在通过其创建sqlSession对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回SqlSession</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//获得sqlSession</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//sql执行内容,通过mapper容器来实现</span><br>        List&lt;User&gt; userList = mapper.getUserList();<br>        <span class="hljs-comment">//......</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每一个Mapper，就代表一个具体的业务！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163826.png" alt="image-20210410204003823"></p><h2 id="5、结果集映射"><a href="#5、结果集映射" class="headerlink" title="5、结果集映射"></a>5、结果集映射</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1  问题"></a>5.1  问题</h3><p><strong>实体类的成员属性与数据库的表中的字段名（列名）不一致</strong></p><p>解决的简单方法：</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ocean.pojo.User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-使用resultMap解决"><a href="#5-2-使用resultMap解决" class="headerlink" title="5.2  使用resultMap解决"></a>5.2  使用resultMap解决</h3><p>结果集映射</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">数据库   <span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   pwd<br>实体类   <span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   password<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li><li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li><li>如果世界总是这么简单就好了。</li></ul><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout 、debug</p><p>现在：日志工厂！</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163831.png" alt="1569892155104"></p><ul><li><p>SLF4J </p></li><li><p>LOG4J  【掌握】</p></li><li><p>LOG4J2</p></li><li><p>JDK_LOGGING</p></li><li><p>COMMONS_LOGGING</p></li><li><p>STDOUT_LOGGING   【掌握】</p></li><li><p>NO_LOGGING</p></li></ul><p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志！STDOUT_LOGGING</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;settings&gt;<br>    &lt;setting name=<span class="hljs-string">&quot;logImpl&quot;</span> value=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;<br>&lt;/settings&gt;<br></code></pre></td></tr></table></figure><p><img src="MyBatis.assets/image-20210411103216513.png" alt="image-20210411103216513"></p><h2 id="7-注解"><a href="#7-注解" class="headerlink" title="7.注解"></a>7.注解</h2><h3 id="7-1、面向接口编程"><a href="#7-1、面向接口编程" class="headerlink" title="7.1、面向接口编程"></a>7.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p><strong>关于接口的理解</strong></p><p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p><strong>三个面向区别</strong></p><ul><li><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .</p></li><li><p>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .</p></li><li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构 </p></li></ul><h3 id="7-2、使用注解开发"><a href="#7-2、使用注解开发" class="headerlink" title="7.2、使用注解开发"></a>7.2、使用注解开发</h3><p><strong>官方建议</strong>:</p><p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p><ul><li>注解在接口上实现   @Select（sql语句）…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//查询全部用户信息</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>需要再核心配置文件中绑定接口！</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ocean.dao.UserMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><p>可以查询到所有信息</p><p><strong>本质：反射机制实现</strong></p><p><strong>底层：动态代理！</strong></p><h3 id="7-3、CRUD"><a href="#7-3、CRUD" class="headerlink" title="7.3、CRUD"></a>7.3、CRUD</h3><ul><li>编写接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//查询全部用户信息</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><p>代码与 “3、Mybatis实现CRUD” 中的代码一致</p><p>我们可以在工具类创建的时候实现自动提交事务！但是一般不这么做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p><p><strong>关于@Param() 注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li></ul><p><strong>#{}     ${} 区别</strong></p><ul><li>#{} ：  能够防止SQL注入问题，一般使用这个</li><li>${} ：   早些年使用</li></ul><h2 id="8、多对一与一对多"><a href="#8、多对一与一对多" class="headerlink" title="8、多对一与一对多"></a>8、多对一与一对多</h2><h3 id="8-1-多对一的处理"><a href="#8-1-多对一的处理" class="headerlink" title="8.1  多对一的处理"></a>8.1  多对一的处理</h3><p>问题：</p><p>多对一的理解：</p><ul><li>from学生，多个学生<strong>关联</strong>一个老师</li><li>from老师，<strong>集合</strong>，一个老师有多个学生</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163838.png" alt="image-20210422191325454"></p><blockquote><p>实例</p></blockquote><ul><li>Project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163841.png" alt="image-20210411202101002"></p><ul><li>创建表，插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(`id`, `name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;罗老师&#x27;</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`tid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>KEY `fktid` (`tid`),<br><span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>新建实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-comment">//多个学生可以是同一个老师，即多对一</span><br>   <span class="hljs-keyword">private</span> Teacher teacher;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写sql查询语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.`id`,s.`name`,t.`name` <span class="hljs-keyword">FROM</span> `student` s,teacher t <br><span class="hljs-keyword">WHERE</span> s.`tid`<span class="hljs-operator">=</span>t.`id` <br></code></pre></td></tr></table></figure><p><strong>按照查询进行嵌套处理就像SQL中的子查询</strong></p><p><strong>按照结果进行嵌套处理就像SQL中的联表查询</strong></p><h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><p>按照查询进行嵌套处理就像SQL中的子查询</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">getStudents1</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//    List&lt;Student&gt; getStudents2();</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>StudentMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--按照查询嵌套处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getTeacher1&quot;</span>&gt;</span><br>        SELECT * from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.ocean.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&lt;result property=&quot;teacher&quot; column=&quot;Teacher&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--不能这么写，因为teacher是一个类，而不是基本数据类型，所以我们采用association--&gt;</span><br>        <span class="hljs-comment">&lt;!--javaType表示这是一个类，而不是基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.ocean.pojo.Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-comment">&lt;!--   association 关联 （多关联一）  collection  集合  （一对多（集合））--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher1&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ocean.pojo.Teacher&quot;</span>&gt;</span><br>        select * from teacher where id= #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStudent</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br>        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);<br>        List&lt;Student&gt; list = mapper.getStudents1();<br>        <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>            System.out.println(student.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按照结果嵌套查询"><a href="#按照结果嵌套查询" class="headerlink" title="按照结果嵌套查询"></a>按照结果嵌套查询</h4><p>按照结果进行嵌套处理就像SQL中的联表查询</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br><span class="hljs-comment">//    List&lt;Student&gt; getStudents1();</span><br><br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">getStudents2</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>StudentMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span>&gt;</span><br>    select s.id sid, s.name sname , t.name tname<br>    from student s,teacher t<br>    where s.tid = t.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.ocean.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.ocean.pojo.Teacher&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStudent</span><span class="hljs-params">()</span></span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);<br>    List&lt;Student&gt; list = mapper.getStudents2();<br>    <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>        System.out.println(student.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-一对多的处理"><a href="#8-2-一对多的处理" class="headerlink" title="8.2  一对多的处理"></a>8.2  一对多的处理</h3><p><strong>注意的点</strong></p><ul><li>associatio关联与集合collection</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163852.png" alt="image-20210422191325454"></p><ul><li>JavaType和ofType都是用来指定对象类型的<ul><li>JavaType是用来指定pojo中属性的类型</li><li>ofType指定的是映射到 List集合属性中pojo的类型。</li></ul></li></ul><blockquote><p>实例    按照结果嵌套查询</p></blockquote><ul><li>数据库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163857.png" alt="image-20210423112729750"></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163903.png" alt="image-20210423112740713"></p><ul><li>project</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163906.png" alt="image-20210423112838525"></p><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> List&lt;Stu&gt; stuList;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stu</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TerMapper</span> </span>&#123;<br>    <span class="hljs-function">List&lt;Ter&gt; <span class="hljs-title">getTer</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ttid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.haiyang.dao.TerMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTer&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ByResult&quot;</span>&gt;</span><br>        select s.id sid, s.name sname,t.id tid,t.name tname<br>        from student s ,teacher t<br>        where s.tid=t.id and t.id=#&#123;ttid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ByResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.haiyang.pojo.Ter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--stuList   student--&gt;</span><br>        <span class="hljs-comment">&lt;!--ofType与javaTyp的区别</span><br><span class="hljs-comment">JavaType和ofType都是用来指定对象类型的</span><br><span class="hljs-comment">JavaType是用来指定pojo中属性的类型</span><br><span class="hljs-comment">ofType指定的是映射到list集合属性中pojo的类型。</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.haiyang.pojo.Stu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ttid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mytest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTer</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br>        TerMapper terMapper = sqlSession.getMapper(TerMapper.class);<br>        List&lt;Ter&gt; ters = terMapper.getTer(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (Ter ter : ters) &#123;<br>            System.out.println(ter.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、动态SQL"><a href="#9、动态SQL" class="headerlink" title="9、动态SQL"></a>9、动态SQL</h2><p><strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p><p><strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong></p><p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。<br><br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></td></tr></table></figure><h1 id="技术积累"><a href="#技术积累" class="headerlink" title="技术积累"></a>技术积累</h1><p>98%的错误都是没有导包，剩下的2%是写错了</p><p><strong>快速复制一个项目到另外一个项目</strong></p><ul><li>复制pom.xml</li><li>复制resources</li><li>复制java</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习笔记</title>
    <link href="/2020/10/05/MySQL/"/>
    <url>/2020/10/05/MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL是个啥"><a href="#1、MySQL是个啥" class="headerlink" title="1、MySQL是个啥"></a>1、MySQL是个啥</h2><h3 id="1-1-数据库"><a href="#1-1-数据库" class="headerlink" title="1.1  数据库"></a>1.1  数据库</h3><p> <strong>DataBase</strong> , 简称<strong>DB</strong> </p><p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p><p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p><p><strong>数据库总览 :</strong></p><ul><li><p>关系型数据库 ( SQL )</p></li><li><ul><li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li><li>关系型数据库通过外键关联来建立表与表之间的关系</li></ul></li><li><p>非关系型数据库 ( NOSQL )</p></li><li><ul><li>Redis , MongoDB , …</li><li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li></ul></li></ul><h3 id="1-2-数据库管理系统（DBMS）"><a href="#1-2-数据库管理系统（DBMS）" class="headerlink" title="1.2  数据库管理系统（DBMS）"></a>1.2  数据库管理系统（DBMS）</h3><p> <strong>DataBase Management System</strong> </p><p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p><p>MySQL应该算是一个数据库管理系统.</p><h3 id="1-3-MySQL简介"><a href="#1-3-MySQL简介" class="headerlink" title="1.3  MySQL简介"></a>1.3  MySQL简介</h3><p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p><p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p><p><strong>特点 :</strong> </p><ul><li>免费 , 开源数据库</li><li>小巧 , 功能齐全</li><li>使用便捷</li><li>可运行于Windows或Linux操作系统</li><li>可适用于中小型甚至大型网站应用</li></ul><p><strong>官网 :</strong> <strong><a href="https://www.mysql.com/">https://www.mysql.com/</a></strong></p><p>建议使用zip安装</p><h3 id="1-4-配置"><a href="#1-4-配置" class="headerlink" title="1.4  配置"></a>1.4  配置</h3><p>1、下载后得到zip压缩包.</p><p>2、解压到自己想要安装到的目录，本人解压到的是F:\Program Files (x86)\mysql-8.0.23-winx64</p><p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">选择<span class="hljs-built_in">PATH</span>,在其后面添加: 你的mysql 安装文件下面的bin文件夹<br></code></pre></td></tr></table></figure><p>4、编辑 my.ini 文件 ,注意替换路径位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span>=F:\Program Files (x86)\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">23</span>-winx64<br><span class="hljs-attr">datadir</span>=F:\Program Files (x86)\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">23</span>-winx64\data\<br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br>skip-grant-tables<br></code></pre></td></tr></table></figure><p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p><p>6、再输入  mysqld –initialize-insecure –user=mysql 初始化数据文件</p><p>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p><p>8、进入界面后更改root密码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> mysql.<span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string=<span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">and</span> Host = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure><p>9、刷新权限</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>10、修改 my.ini文件删除最后一句skip-grant-tables</p><p>11、重启mysql即可正常使用</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> stop mysql<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></table></figure><p>12、连接上测试出现以下结果就安装好了</p><h3 id="1-5-SQLyog"><a href="#1-5-SQLyog" class="headerlink" title="1.5  SQLyog"></a>1.5  SQLyog</h3><p>可手动操作,管理MySQL数据库的软件工具</p><p>特点 : 简洁 , 易用 , 图形化</p><p>在历史记录中可以看到相对应的数据库操作的语句 .</p><p>对照学习sql语法</p><h3 id="1-6-常用命令"><a href="#1-6-常用命令" class="headerlink" title="1.6  常用命令"></a>1.6  常用命令</h3><p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码</p><p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p><p><strong>几个基本的数据库操作命令 :</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>)<span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>; 修改密码<br>flush <span class="hljs-keyword">privileges</span>; 刷新数据库<br><span class="hljs-keyword">show</span> databases; 显示所有数据库<br>use dbname；打开某个数据库<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>; 显示数据库mysql中所有的表<br>describe <span class="hljs-keyword">user</span>; 显示表mysql数据库中<span class="hljs-keyword">user</span>表的列信息<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-type">name</span>; 创建数据库<br>use databasename; 选择数据库<br><br><span class="hljs-keyword">exit</span>; 退出Mysql<br>? 命令关键词 : 寻求帮助<br><span class="hljs-comment">-- 表示注释</span><br></code></pre></td></tr></table></figure><h3 id="1-7-启动数据库步骤"><a href="#1-7-启动数据库步骤" class="headerlink" title="1.7  启动数据库步骤"></a>1.7  启动数据库步骤</h3><ul><li>右击以管理员身份运行CMD</li><li>启动net：net start mysql</li><li>登入：mysql -h localhost -u root -p          数据库  -host  主机地址   -user   用户名    -password   密码</li><li>输入sql语句执行即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510162700.png" alt="image-20210411143021354"></p><ul><li><p>登出：quit</p></li><li><p>关闭net：net stop mysql</p></li></ul><h3 id="1-8-my-ini常用配置"><a href="#1-8-my-ini常用配置" class="headerlink" title="1.8  my.ini常用配置"></a>1.8  my.ini常用配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># 设置3306端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录</span><br><span class="hljs-attr">basedir</span>=F:\\Program Files (x86)\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">23</span>-winx64<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=F:\\Program Files (x86)\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">23</span>-winx64\\data   <br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[client]</span><br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><p>MySQL的默认编码是 Latin1,不支持中文</p><h2 id="2、DDL-数据库定义语言"><a href="#2、DDL-数据库定义语言" class="headerlink" title="2、DDL 数据库定义语言"></a>2、DDL 数据库定义语言</h2><h3 id="2-1-操作数据库"><a href="#2-1-操作数据库" class="headerlink" title="2.1  操作数据库"></a>2.1  操作数据库</h3><ul><li><p>创建数据库 :  create database [if not exists] 数据库名;</p></li><li><p>删除数据库 : drop database [if exists] 数据库名;</p></li><li><p>查看数据库 : show databases;</p></li><li><p>使用数据库 : use 数据库名;</p></li></ul><h3 id="2-2-创建数据表"><a href="#2-2-创建数据表" class="headerlink" title="2.2  创建数据表"></a>2.2  创建数据表</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] `表名`(<br>   <span class="hljs-string">&#x27;字段名1&#x27;</span> 列类型 [属性][索引][注释],<br>   <span class="hljs-string">&#x27;字段名2&#x27;</span> 列类型 [属性][索引][注释],<br>  #...<br>   <span class="hljs-string">&#x27;字段名n&#x27;</span> 列类型 [属性][索引][注释]<br>)[表类型][表字符集][注释];<br></code></pre></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 目标 : 创建一个school数据库</span><br><span class="hljs-comment">-- 创建学生表(列,字段)</span><br><span class="hljs-comment">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="hljs-comment">-- 创建表之前 , 一定要先选择数据库</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;匿名&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>`pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;123456&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>`sex` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>`birthday` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>`address` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;地址&#x27;</span>,<br>`email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-comment">-- 查看数据库的定义</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE school;<br><span class="hljs-comment">-- 查看数据表的定义</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student;<br><span class="hljs-comment">-- 显示表结构</span><br><span class="hljs-keyword">DESC</span> student;  <span class="hljs-comment">-- 设置严格检查模式(不能容错了)SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-字段属性"><a href="#2-3-字段属性" class="headerlink" title="2.3  字段属性"></a>2.3  字段属性</h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p></li><li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p></li><li><p>可定义起始值和步长</p></li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><h3 id="2-4-操作数据表（删改查）"><a href="#2-4-操作数据表（删改查）" class="headerlink" title="2.4  操作数据表（删改查）"></a>2.4  操作数据表（删改查）</h3><blockquote><p>修改表</p></blockquote><p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p><p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p>修改字段 :</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p><blockquote><p>删除数据表</p></blockquote><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><h3 id="2-5-索引"><a href="#2-5-索引" class="headerlink" title="2.5  索引"></a>2.5  索引</h3><blockquote><p>索引的作用</p></blockquote><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化.</li></ul><p><strong>主键索引：PRIMARY KEY</strong></p><ul><li>主键 : 某一个属性组能唯一标识一条记录（该列中的值不能重复）</li><li>一个表内的只有一个主键</li></ul><p><strong>唯一索引： UNIQUE KEY</strong></p><ul><li>该列中的值不能重复，可以有多个</li></ul><p><strong>常规索引：KEY</strong></p><ul><li>作用 : 快速定位特定数据</li><li>与数据结构的关系：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li></ul><h3 id="2-6-其他"><a href="#2-6-其他" class="headerlink" title="2.6 其他"></a>2.6 其他</h3><p>可用反引号（`）（Tab键上面的那个）为标识符（库名、表名、字段名、索引、别名）包裹，<strong>以避免与关键字重名！</strong>中文也可以作为标识符！</p><p><strong>注释：</strong><br>  单行注释 # 注释内容<br>  多行注释 /* 注释内容 */<br>  单行注释 – 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</p><p><strong>SQL对大小写不敏感 （关键字）</strong></p><p>MySQL的<strong>数据表的类型</strong> : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>常见的 MyISAM 与 InnoDB 类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510162710" alt="img"></p><p><strong>适用场合   :</strong></p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建一个school数据库</span><br><span class="hljs-keyword">CREATE</span> DATABASE `school`<span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><span class="hljs-comment">-- 创建学生表</span><br>USE `school`;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `student`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student`(<br>`StudentNo` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>`LoginPwm` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>`StudentName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学生姓名&#x27;</span>,<br>`Sex` TINYINT(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>`GradeId` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年纪编号&#x27;</span>,<br>`Phone` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;联系电话，允许为空&#x27;</span>,<br>`Address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;地址，允许为空&#x27;</span>,<br>`Borndate` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;出生时间&#x27;</span>,<br>`Email` <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱账号允许为空&#x27;</span>,<br>`IdentityCard` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`StudentNo`),<br> <span class="hljs-keyword">UNIQUE</span> KEY `identitycard`(`identitycard`),<br> KEY `email` (`email`)  <br>)ENGINE <span class="hljs-operator">=</span> MYISAM <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-comment">-- 创建年级表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> `grade`;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `grade`(<br>`gradeid` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;年级编号&#x27;</span>,<br>  `gradename` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;年级名称&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (`gradeid`)<br>) engine<span class="hljs-operator">=</span>innodb auto_increment <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">default</span> charset <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 创建科目表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> `subject`;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `subject`(<br>`subjectno`<span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;课程编号&#x27;</span>,<br>    `subjectname` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;课程名称&#x27;</span>,<br>    `classhour` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;学时&#x27;</span>,<br>    `gradeid` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;年级编号&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (`subjectno`)<br>)engine <span class="hljs-operator">=</span> innodb auto_increment <span class="hljs-operator">=</span> <span class="hljs-number">19</span> <span class="hljs-keyword">default</span> charset <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 创建成绩表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> `<span class="hljs-keyword">result</span>`;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `<span class="hljs-keyword">result</span>`(<br>`studentno` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;学号&#x27;</span>,<br>    `subjectno` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;课程编号&#x27;</span>,<br>    `examdate` datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;考试日期&#x27;</span>,<br>    `studentresult` <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;考试成绩&#x27;</span>,<br>    key `subjectno` (`subjectno`)<br>)engine <span class="hljs-operator">=</span> innodb <span class="hljs-keyword">default</span> charset <span class="hljs-operator">=</span> utf8;<br><br><br><span class="hljs-comment">-- 插入学生数据 其余自行添加 这里只添加了2行</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`StudentNo`,`LoginPwm`,`StudentName`,`Sex`,`GradeId`,`Phone`,`Address`,`Borndate`,`Email`,`IdentityCard`)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;张伟&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;13800001234&#x27;</span>,<span class="hljs-string">&#x27;北京朝阳&#x27;</span>,<span class="hljs-string">&#x27;1999-1-1&#x27;</span>,<span class="hljs-string">&#x27;text123@qq.com&#x27;</span>,<span class="hljs-string">&#x27;123456198001011234&#x27;</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;赵强&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;13800002222&#x27;</span>,<span class="hljs-string">&#x27;广东深圳&#x27;</span>,<span class="hljs-string">&#x27;1999-2-1&#x27;</span>,<span class="hljs-string">&#x27;text111@qq.com&#x27;</span>,<span class="hljs-string">&#x27;123456199001011233&#x27;</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;李华&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;13800001111&#x27;</span>,<span class="hljs-string">&#x27;山东烟台&#x27;</span>,<span class="hljs-string">&#x27;1999-4-3&#x27;</span>,<span class="hljs-string">&#x27;text321@qq.com&#x27;</span>,<span class="hljs-string">&#x27;123456198001011235&#x27;</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;王刚&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;13800005252&#x27;</span>,<span class="hljs-string">&#x27;内蒙古包头&#x27;</span>,<span class="hljs-string">&#x27;1999-2-21&#x27;</span>,<span class="hljs-string">&#x27;text441@qq.com&#x27;</span>,<span class="hljs-string">&#x27;123456199001011236&#x27;</span>);<br><br><br><span class="hljs-comment">-- 插入成绩数据  这里仅插入了一组，其余自行添加</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">result</span>`(`studentno`,`subjectno`,`examdate`,`studentresult`)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1001</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="hljs-number">85</span>),<br>(<span class="hljs-number">1001</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="hljs-number">70</span>),<br>(<span class="hljs-number">1001</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="hljs-number">68</span>),<br>(<span class="hljs-number">1001</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="hljs-number">98</span>),<br>(<span class="hljs-number">1001</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="hljs-number">58</span>),<br><br>(<span class="hljs-number">1002</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="hljs-number">86</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="hljs-number">86</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="hljs-number">42</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="hljs-number">86</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="hljs-number">68</span>),<br><br>(<span class="hljs-number">1003</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="hljs-number">76</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="hljs-number">86</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="hljs-number">45</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="hljs-number">88</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="hljs-number">99</span>),<br><br>(<span class="hljs-number">1004</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2013-11-11 16:00:00&#x27;</span>,<span class="hljs-number">88</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2013-11-12 16:00:00&#x27;</span>,<span class="hljs-number">77</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;2013-11-11 09:00:00&#x27;</span>,<span class="hljs-number">53</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;2013-11-13 16:00:00&#x27;</span>,<span class="hljs-number">68</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;2013-11-14 16:00:00&#x27;</span>,<span class="hljs-number">88</span>);<br><br><span class="hljs-comment">-- 插入年级数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `grade` (`gradeid`,`gradename`) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;大一&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;大二&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;大三&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;大四&#x27;</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;预科班&#x27;</span>);<br><br><span class="hljs-comment">-- 插入科目数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `subject`(`subjectno`,`subjectname`,`classhour`,`gradeid`)<span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;高等数学-1&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;高等数学-2&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;高等数学-3&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;高等数学-4&#x27;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">4</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;C语言-1&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;C语言-2&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;C语言-3&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;C语言-4&#x27;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">4</span>),<br>(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;Java程序设计-1&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;Java程序设计-2&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;Java程序设计-3&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;Java程序设计-4&#x27;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">4</span>),<br>(<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;数据库结构-1&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">14</span>,<span class="hljs-string">&#x27;数据库结构-2&#x27;</span>,<span class="hljs-number">110</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;数据库结构-3&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;数据库结构-4&#x27;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">4</span>),<br>(<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;C#基础&#x27;</span>,<span class="hljs-number">130</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;Java-从入门到放弃&#x27;</span>,<span class="hljs-number">999</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="3、DML-数据库操作语言"><a href="#3、DML-数据库操作语言" class="headerlink" title="3、DML  数据库操作语言"></a>3、DML  数据库操作语言</h2><p><strong>DML语言</strong>  ：数据操作语言</p><ul><li>用于操作数据库对象中所包含的数据</li><li>实现 <strong>增删改</strong> 数据的功能</li></ul><h3 id="3-1-INSERT"><a href="#3-1-INSERT" class="headerlink" title="3.1  INSERT"></a>3.1  INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名[(字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3</span>,...)] <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;值1&#x27;</span>,<span class="hljs-string">&#x27;值2&#x27;</span>,<span class="hljs-string">&#x27;值3&#x27;</span>)<br><span class="hljs-comment">-- 不写字段的话，默认全有</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> grade(gradename) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;大一&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-2-UPDATE"><a href="#3-2-UPDATE" class="headerlink" title="3.2  UPDATE"></a>3.2  UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE 表名 <span class="hljs-keyword">SET</span> column_name<span class="hljs-operator">=</span><span class="hljs-keyword">value</span> [,column_name2<span class="hljs-operator">=</span>value2,...] [<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>];<br><span class="hljs-comment">-- 修改年级信息</span><br>UPDATE grade <span class="hljs-keyword">SET</span> gradename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高中&#x27;</span> <span class="hljs-keyword">WHERE</span> gradeid <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><p><strong>where子句</strong></p><p>where可以简单的理解为 : 有条件地从表中筛选数据，<strong>可以使用AND连接</strong>，用来多个条件限制</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510162942.png" alt="image-20210411144851773"></p><h3 id="3-3-DELETE"><a href="#3-3-DELETE" class="headerlink" title="3.3  DELETE"></a>3.3  DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>];<br><span class="hljs-comment">-- 删除最后一个数据</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> grade <span class="hljs-keyword">WHERE</span> gradeid <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> [<span class="hljs-keyword">TABLE</span>] table_name;<br><span class="hljs-comment">-- 清空年级表</span><br><span class="hljs-keyword">TRUNCATE</span> grade<br></code></pre></td></tr></table></figure><p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变</p><p><strong>注意：区别于DELETE命令</strong></p><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p></li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><h3 id="3-4-外键"><a href="#3-4-外键" class="headerlink" title="3.4  外键"></a>3.4  外键</h3><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><p><strong>外键作用</strong></p><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><p><strong>阿里巴巴开发手册规定：</strong></p><p>【强制】<strong>不得使用外键与级联</strong>,一切外键概念必须在应用层解决。</p><p>因为每次做 DELETE或者 UPDATE都必须考虑外键约束,会导致开发的时候很痛苦测试数据极为不方便。</p><p>物理外键一般使用联表查询</p><h2 id="4、DQL-数据库查询语言"><a href="#4、DQL-数据库查询语言" class="headerlink" title="4、DQL 数据库查询语言"></a>4、DQL 数据库查询语言</h2><h3 id="4-1-SELECT语法"><a href="#4-1-SELECT语法" class="headerlink" title="4.1  SELECT语法"></a>4.1  SELECT语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span>]<br>&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;<br><span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">as</span> table_alias]<br>  [<span class="hljs-keyword">left</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">right</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> table_name2]  <span class="hljs-comment">-- 联合查询</span><br>  [<span class="hljs-keyword">WHERE</span> ...]  <span class="hljs-comment">-- 指定结果需满足的条件</span><br>  [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> ...]  <span class="hljs-comment">-- 指定结果按照哪几个字段来分组</span><br>  [<span class="hljs-keyword">HAVING</span>]  <span class="hljs-comment">-- 过滤分组的记录必须满足的次要条件；写完group后，发现忘了加where时使用</span><br>  [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]  <span class="hljs-comment">-- 指定查询记录按一个或多个条件排序</span><br>  [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];<br>   <span class="hljs-comment">-- 指定查询的记录从哪条至哪条</span><br></code></pre></td></tr></table></figure><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><p>查询系统的版本号   SELECT VERSION()</p><h3 id="4-2-指定查询字段"><a href="#4-2-指定查询字段" class="headerlink" title="4.2  指定查询字段"></a>4.2  指定查询字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span><br><br><span class="hljs-comment">-- 查询所有学生信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 查询指定列(学号 , 姓名)</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 这里是为列取别名(当然as关键词可以省略)</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentname <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 使用as也可以为表取别名</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentname <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s;<br><br><span class="hljs-comment">-- 使用as,为查询结果取一个新名字</span><br><span class="hljs-comment">-- CONCAT()函数拼接字符串</span><br><span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-string">&#x27;姓名:&#x27;</span>,studentname) <span class="hljs-keyword">AS</span> 新姓名 <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- # 查看哪些同学参加了考试(学号) 去除重复项</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 查看考试成绩</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 查看哪些同学参加了考试</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></code></pre></td></tr></table></figure><blockquote><p>结合where使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 满足条件的查询(where)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-comment">-- 查询考试成绩在95-100之间的</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- AND也可以写成 &amp;&amp;</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-operator">&amp;&amp;</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 模糊查询(对应的词:精确查询)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 除了1000号同学,要其他同学的成绩</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> studentno<span class="hljs-operator">!=</span><span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">-- 使用NOT</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> studentno<span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-模糊查询"><a href="#4-3-模糊查询" class="headerlink" title="4.3  模糊查询"></a>4.3  模糊查询</h3><ul><li>like与%的配合使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 模糊查询 between and \ like \ in \ null</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- LIKE</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询姓刘的同学的学号及姓名</span><br><span class="hljs-comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘_&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘__&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有 嘉 字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%嘉%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span><br><span class="hljs-comment">-- 自定义转义符关键字: ESCAPE &#x27;:&#x27;</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- IN</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span> (<span class="hljs-number">1000</span>,<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br><br><span class="hljs-comment">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname,address <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> address <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;南京&#x27;</span>,<span class="hljs-string">&#x27;河南洛阳&#x27;</span>);<br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- NULL 空</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询出生日期没有填写的同学</span><br><span class="hljs-comment">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询出生日期填写的同学</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> Address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">OR</span> Address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="4-4-连接查询"><a href="#4-4-连接查询" class="headerlink" title="4.4  连接查询"></a>4.4  连接查询</h3><p><strong>七种Join</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510162957.jpg" alt="图解 SQL 里的各种 JOIN"></p><p>感觉看了这个图之后会更糊涂</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `StudentNo` <span class="hljs-keyword">AS</span> 学生编号<br><span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">result</span>`<br><br><span class="hljs-keyword">SELECT</span> 要选出来展示的内容<br><span class="hljs-keyword">FROM</span> 哪个表<br><span class="hljs-keyword">where</span> 满足什么条件<br>... <span class="hljs-keyword">join</span> 其他的表<br><span class="hljs-keyword">on</span> 判断的条件<br></code></pre></td></tr></table></figure><p>对 on是建立连接 where是对结果筛选</p><p><strong>join    (连接的表)  on   (判断的条件)    连接查询</strong><br><strong>where    等值查询</strong></p><p><strong>我的理解：</strong></p><ul><li><p>一个表   左中右   join    另外一个表     on  两个表都有的属性</p></li><li><p><strong>属性a  左中右哪一个有这个属性a，然后就提取出含属性a的的整行数据</strong></p></li><li><p><strong>所以一般用inner join</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-comment">-- is null 而不是  =null</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="hljs-comment">-- `StudentNo``StudentName``StudentResult``subjectname``subject`</span><br><span class="hljs-comment">-- `student``result``subject`</span><br><span class="hljs-keyword">select</span> s.`StudentNo`,`StudentName`,`StudentResult`,`subjectname`<br><span class="hljs-keyword">from</span> `student` <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `<span class="hljs-keyword">result</span>`<span class="hljs-keyword">AS</span> r<br><span class="hljs-keyword">on</span> r.StudentNo <span class="hljs-operator">=</span> s.`StudentNo`<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> `subject` <span class="hljs-keyword">as</span> sub<br><span class="hljs-keyword">on</span> sub.`subjectno` <span class="hljs-operator">=</span> r.`subjectno`<br></code></pre></td></tr></table></figure><p>– 思考査询 高等数学第一学年 课程成绩排名前2的学生,并且分数要大于80的学生信息<br>– (学号,姓名,课程名称,分数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.`StudentNo` <span class="hljs-keyword">AS</span> 学生编号,`StudentName` <span class="hljs-keyword">AS</span> 姓名,`StudentResult` 成绩,`subjectname` 学科名<br><span class="hljs-keyword">FROM</span> `student` s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `<span class="hljs-keyword">result</span>` r<br><span class="hljs-keyword">ON</span> s.StudentNo <span class="hljs-operator">=</span> r.`StudentNo`<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.`subjectno` <span class="hljs-operator">=</span> sub.`subjectno`<br><span class="hljs-keyword">WHERE</span> `subjectname` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-1&#x27;</span><br><span class="hljs-keyword">AND</span> StudentResult <span class="hljs-operator">&gt;=</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>物理外键一般使用联表查询</p><h3 id="4-5-排序与分页"><a href="#4-5-排序与分页" class="headerlink" title="4.5  排序与分页"></a>4.5  排序与分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*============== 排序 ================</span><br><span class="hljs-comment">语法 : ORDER BY</span><br><span class="hljs-comment">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="hljs-comment">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="hljs-comment">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="hljs-comment">-- 按成绩降序排序</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">/*============== 分页 ================</span><br><span class="hljs-comment">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="hljs-comment">好处 : (用户体验,网络传输,查询压力)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">推导:</span><br><span class="hljs-comment">   第一页 : limit 0,5</span><br><span class="hljs-comment">   第二页 : limit 5,5</span><br><span class="hljs-comment">   第三页 : limit 10,5</span><br><span class="hljs-comment">   ......</span><br><span class="hljs-comment">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="hljs-comment">   [pageNo:页码,pageSize:单页面显示条数]</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 每页显示5条数据</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span> , studentno<br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6  子查询"></a>4.6  子查询</h3><p>什么是子查询?</p><ul><li>在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</li><li>嵌套查询可由多个子查询组成,求解的方式是由里及外;</li><li>子查询返回的结果一般都是集合,故而建议使用IN关键字;</li></ul><p>– 思考査询 高等数学第一学年 课程成绩排名前2的学生,并且分数要大于80的学生信息<br>– (学号,姓名,课程名称,分数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方法三:使用子查询</span><br><span class="hljs-comment">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span>(<br>   <span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> subjectno<span class="hljs-operator">=</span>(<br>       <span class="hljs-keyword">SELECT</span> subjectno <span class="hljs-keyword">FROM</span> `subject` <span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-2&#x27;</span><br>  )<br>)<br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="5、事务"><a href="#5、事务" class="headerlink" title="5、事务"></a>5、事务</h2><blockquote><p>什么是事务</p></blockquote><ul><li>事务就是将一组SQL语句放在同一批次内去执行</li><li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li><li>MySQL事务处理只支持InnoDB和BDB数据表类型</li></ul><blockquote><p>事务的ACID原则  百度 ACID</p></blockquote><p><strong>原子性(Atomic)</strong></p><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>不可再分割</li></ul><p><strong>一致性(Consist)</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li><li>能量守恒定律</li></ul><p><strong>隔离性(Isolated)</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><p><strong>持久性(Durable)</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li><li>事务一旦提交不可逆，被持久化到数据库</li></ul><blockquote><p><strong>基本语法</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用set语句来改变自动提交模式</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">/*关闭*/</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;   <span class="hljs-comment">/*开启*/</span><br><br><span class="hljs-comment">-- 注意:</span><br><span class="hljs-comment">--- 1.MySQL中默认是自动提交</span><br><span class="hljs-comment">--- 2.使用事务时应先关闭自动提交</span><br><br><span class="hljs-comment">-- 开始一个事务,标记事务的起始点</span><br><span class="hljs-keyword">START</span> TRANSACTION  <br><br><span class="hljs-comment">-- 提交一个事务给数据库</span><br><span class="hljs-keyword">COMMIT</span><br><br><span class="hljs-comment">-- 将事务回滚,数据回到本次事务的初始状态</span><br><span class="hljs-keyword">ROLLBACK</span><br><br><span class="hljs-comment">-- 还原MySQL数据库的自动提交</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 保存点</span><br><span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 设置一个事务保存点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 回滚到保存点</span><br><span class="hljs-keyword">RELEASE</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名称 <span class="hljs-comment">-- 删除保存点</span><br></code></pre></td></tr></table></figure><blockquote><p>例子</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">课堂测试题目</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">A在线买一款价格为500元商品,网上银行转账.</span><br><span class="hljs-comment">A的银行卡余额为2000,然后给商家B支付500.</span><br><span class="hljs-comment">商家B一开始的银行卡余额为10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">创建数据库shop和创建表account并插入2条数据</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">CREATE</span> DATABASE `shop`<span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br>USE `shop`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`cash` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account (`name`,`cash`)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">2000.00</span>),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">10000.00</span>)<br><br><span class="hljs-comment">-- 转账实现</span><br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">START</span> TRANSACTION;  <span class="hljs-comment">-- 开始一个事务,标记事务的起始点</span><br>UPDATE account <span class="hljs-keyword">SET</span> cash<span class="hljs-operator">=</span>cash<span class="hljs-number">-500</span> <span class="hljs-keyword">WHERE</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;A&#x27;</span>;<br>UPDATE account <span class="hljs-keyword">SET</span> cash<span class="hljs-operator">=</span>cash<span class="hljs-operator">+</span><span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>; <span class="hljs-comment">-- 提交事务</span><br># <span class="hljs-keyword">rollback</span>;<br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 恢复自动提交</span><br></code></pre></td></tr></table></figure><p>事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java</span><br>方法()&#123;<span class="hljs-comment">//这个方法完成的是事务</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//正常的业务代码</span><br>        <span class="hljs-comment">//commit提交</span><br>    &#125;<br>    <span class="hljs-keyword">catch</span>&#123;<br>        <span class="hljs-comment">//rollback</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试性能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*EXPLAIN : 分析SQL语句执行性能*/</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1000&#x27;</span>;<br>查看参数<span class="hljs-keyword">rows</span>，查询了多少行<br></code></pre></td></tr></table></figure><h2 id="6、JDBC"><a href="#6、JDBC" class="headerlink" title="6、JDBC"></a>6、JDBC</h2><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p><p><strong>数据库驱动</strong></p><p>没有什么是加一层解决不了的事情，加上JDBC数据库驱动层，用来驱动不同的数据库</p><p>导包：</p><p> java.sql</p><p>javax.sql</p><p>数据库驱动包：<a href="https://mvnrepository.com/">mysql-connector-java-5.1.47</a></p><h4 id="6-1-第一个JDBC程序"><a href="#6-1-第一个JDBC程序" class="headerlink" title="6.1  第一个JDBC程序"></a>6.1  第一个JDBC程序</h4><p>1.新建数据库，建表，插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">p38<br><span class="hljs-keyword">CREATE</span> DATABASE `jdbcStudy` <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><br>USE `jdbcStudy`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users`(<br> `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br> `NAME` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br> `PASSWORD` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br> `email` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>),<br> birthday <span class="hljs-type">DATE</span><br>);<br><br> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users`(`id`,`NAME`,`PASSWORD`,`email`,`birthday`)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;zs@sina.com&#x27;</span>,<span class="hljs-string">&#x27;1980-12-04&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;lisi@sina.com&#x27;</span>,<span class="hljs-string">&#x27;1981-12-04&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;wangwu&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;wangwu@sina.com&#x27;</span>,<span class="hljs-string">&#x27;1979-12-04&#x27;</span>)<br></code></pre></td></tr></table></figure><p>2.用Java编写jdbc程序</p><ul><li>新建普通java程序</li><li>新建lib目录，导包：数据库驱动包：mysql-connector-java-5.1.47 ，右击lib    add as library</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163022.png" alt="image-20210422172059051"></p><p>3.代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//思路：</span><br><span class="hljs-comment">//1.加载驱动</span><br><span class="hljs-comment">//2.用户信息和url</span><br><span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br><span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br><span class="hljs-comment">//5.实现增删改查，执行SQL语句， executeUpdate(sql); executeQuery(sql);</span><br><span class="hljs-comment">//6.释放链接 </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBC01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//1.加载驱动固定写法</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//包内的驱动</span><br>        <span class="hljs-comment">//2.用户信息和url</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?</span><br><span class="hljs-string">            useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;<br>        String username =<span class="hljs-string">&quot;root&quot;</span>;<br>        String password=<span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-comment">//3.连接成功，创建数据库对象   Connection代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br>        <span class="hljs-comment">//4.生成Statement类</span><br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">//5.利用statement，执行sql语句，sql语言</span><br>        String sql=<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>;<br>        ResultSet resultSet = statement.executeQuery(sql);<br>        <span class="hljs-comment">//6.释放链接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>url</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// mysql：3306</span><br><span class="hljs-comment">//jdbc:mysq1://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span><br><span class="hljs-comment">//协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span><br></code></pre></td></tr></table></figure><blockquote><p>Driver Manager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="hljs-comment">//固定写法，简洁写法</span><br><span class="hljs-comment">//Driver源码：DriverManager.registerDriver(new Driver());</span><br><br>Connection connection = DriverManager.getConnection(url, username, password);<br><span class="hljs-comment">//Connection代表数据库类，生成数据库对象connection</span><br>connection.commit();<span class="hljs-comment">//事务提交</span><br>connection.rollback();<span class="hljs-comment">//事务回滚</span><br>connection.setAutoCommit();<span class="hljs-comment">//数据库设置自动提交</span><br>connection.prepareStatement();<span class="hljs-comment">//相比Statement，更安全</span><br><br><span class="hljs-comment">//增删改，执行SQL对象  Statement执行sqL的对象，</span><br>Statement statement = connection.createStatement();<br>statement. executeQuery;<span class="hljs-comment">//查询操作返回 Resultset</span><br>statement. execute();<span class="hljs-comment">//执行任何sQL</span><br>statement. executeUpdate();<span class="hljs-comment">//更新、插入、删除。都是用这个,返回一个受影响的行数</span><br><br><br><span class="hljs-comment">//查</span><br>ResultSet resultSet = statement.executeQuery(sql);<br>resultSet.getObject(sql);<br>resultSet.getInt(sql);<br>resultSet.getString(sql);<br>                         <br>resultset. beforefirst(;<span class="hljs-comment">//移动到最前面</span><br>resultset. aftertaste(;<span class="hljs-comment">//移动到最后面</span><br>resultset. next();<span class="hljs-comment">//移动到下一个数据</span><br>resultset. previous;<span class="hljs-comment">//移动到前一行</span><br>resultset. absolute(row);<span class="hljs-comment">//移动到指定行</span><br>                      <br><br><span class="hljs-comment">//释放链接，用完关掉，免得占用内存</span><br>resultSet.close();<br>statement.close();<br>connection.close();<br></code></pre></td></tr></table></figure><blockquote><p>Statement详解</p></blockquote><p>Jdbc中的 statement对象用于向数据库发送SQL语句,想完成对数据库的增删改查,只需要通过这个对象向数据库发送增删改<br>查语句即可。</p><ul><li>statement. executeUpdate();//更新、插入、删除。都是用这个,返回一个受影响的行数</li><li>ResultSet resultSet = statement.executeQuery(sql);//查询</li></ul><blockquote><p>将JDBC封装</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;JdbcUtils被预先加载&quot;</span>);<br>            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(in);<br>            <span class="hljs-comment">//以上为，文件的IO流相关知识,读取Jdbc配置文件信息</span><br>            <span class="hljs-comment">//我们需要在db.properties配置我们数据库参数</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-comment">//1.加载驱动</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//创建Connection、</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放链接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-JDBC实现CURD"><a href="#6-2-JDBC实现CURD" class="headerlink" title="6.2  JDBC实现CURD"></a>6.2  JDBC实现CURD</h4><ul><li>增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInsert</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        Statement st=<span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>            st = conn.createStatement();<br>            <span class="hljs-comment">//5.实现增删改查，statement. executeUpdate(sql);</span><br>            String sql=<span class="hljs-string">&quot;INSERT INTO `users` VALUES  (4,&#x27;xioayang&#x27;,&#x27;123456&#x27;,&#x27;xioaiyang@qq.com&#x27;,&#x27;1997-01-01&#x27;)&quot;</span>;<br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入第四行数据成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDelect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        Statement st=<span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>            st = conn.createStatement();<br>            <span class="hljs-comment">//5.实现增删改查，statement. executeUpdate(sql);</span><br>            String sql=<span class="hljs-string">&quot;DELETE FROM `users` WHERE id =4&quot;</span>;<br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除第四行数据成功！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUpdate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        Statement st=<span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>            st = conn.createStatement();<br>            <span class="hljs-comment">//5.实现增删改查，statement. executeUpdate(sql);</span><br>            String sql=<span class="hljs-string">&quot;UPDATE `users` SET `NAME`=&#x27;xiaohuang&#x27; WHERE id=4&quot;</span>;<br>            <span class="hljs-keyword">int</span> i = st.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;修改第四行数据成功！名字变为小黄&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,st,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQuery</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>            st = conn.createStatement();<br><br>            <span class="hljs-comment">//5.实现增删改查，执行SQL语句， executeUpdate(sql); executeQuery(sql);</span><br>            String sql=<span class="hljs-string">&quot;SELECT * FROM `users`&quot;</span>;<br>            resultSet= st.executeQuery(sql);<br>            <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;姓名=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;密码=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;邮件=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;生日=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,st,resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3-sql注入与Preparedstatement"><a href="#6-3-sql注入与Preparedstatement" class="headerlink" title="6.3  sql注入与Preparedstatement"></a>6.3  sql注入与Preparedstatement</h4><p><strong>sql存在漏洞,会被攻击导致数据泄露</strong></p><p>Preparedstatement可以防止SQL注入。效率更好!</p><p>用Preparedstatement替换Statement</p><p>接口Preparedstatement继承了接口Statement</p><ul><li>先预编译</li><li>给参数赋值</li><li>执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.加载驱动</span><br><span class="hljs-comment">//2.用户信息和url</span><br><span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br><span class="hljs-comment">//4.执行SQL对象  Preparedstatement执行sqL的对象</span><br>    <span class="hljs-comment">//4.1 先预编译sql语句</span><br>    <span class="hljs-comment">//4.2 给参数赋值</span><br>    <span class="hljs-comment">//4.3 最后执行</span><br><span class="hljs-comment">//5.实现增删改查，执行SQL语句， executeUpdate(sql); executeQuery(sql);</span><br><span class="hljs-comment">//6.释放链接 </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPreStInsert</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  PreparedStatement执行sqL的对象</span><br><br>            String sql =<span class="hljs-string">&quot;insert into users(`id`,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>;<br>            <span class="hljs-comment">//4.1 先预编译sql语句</span><br>            pst=conn.prepareStatement(sql);<br>            <span class="hljs-comment">//4.2 给参数赋值</span><br>            <span class="hljs-comment">//5.实现增删改查，执行SQL语句， executeUpdate(sql); executeQuery(sql);</span><br>            pst.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            pst.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>            pst.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;xiaoming@qq.com&quot;</span>);<br>            <span class="hljs-comment">//注意点:sqL.Date  数据库的日期</span><br>            <span class="hljs-comment">//new java.util.Date().getTime()    获得本地的时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<br>            <span class="hljs-comment">//4.3 最后执行</span><br>            <span class="hljs-keyword">int</span> i = pst.executeUpdate();<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;插入了一行数据：晓明&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-4-在idea中添加数据库"><a href="#6-4-在idea中添加数据库" class="headerlink" title="6.4  在idea中添加数据库"></a>6.4  在idea中添加数据库</h4><p>一定要先导入包</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510163104.png" alt="image-20210422133606592"></p><p>添加成功后，选择自己想要的数据库</p><h4 id="6-5-JDBC事务"><a href="#6-5-JDBC事务" class="headerlink" title="6.5  JDBC事务"></a>6.5  JDBC事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">connection.setAutoCommit();<span class="hljs-comment">//数据库设置自动提交</span><br>connection.commit();<span class="hljs-comment">//事务提交</span><br>connection.rollback();<span class="hljs-comment">//失败回滚</span><br></code></pre></td></tr></table></figure><ol><li>开启事务</li><li>定义事务，提交事务</li><li>在catch中定义回滚语句，<strong>但是默认会有，不写也行</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java</span><br>方法()&#123;<span class="hljs-comment">//这个方法完成的是事务</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//正常的业务代码</span><br>        <span class="hljs-comment">//commit提交</span><br>    &#125;<br>    <span class="hljs-keyword">catch</span>&#123;<br>        <span class="hljs-comment">//rollback</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTransaction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn=<span class="hljs-keyword">null</span>;<br>        PreparedStatement pst=<span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动    //2.用户信息和url   //3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils.getConnection();<br><span class="hljs-comment">//关用数据厍的自动提交,自动会开启事务</span><br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);  <span class="hljs-comment">//开启事务</span><br><br>            <span class="hljs-comment">//4.执行SQL对象  PreparedStatement执行sqL的对象</span><br><br>            String sql01=<span class="hljs-string">&quot;UPDATE  `account` SET money=money-100 WHERE `name`=&#x27;A&#x27;&quot;</span>;<br>            pst  = conn.prepareStatement(sql01);<br>            pst.executeUpdate();<br><br><span class="hljs-comment">//测试失败    int i=1/0;</span><br>            String sql02=<span class="hljs-string">&quot;UPDATE  `account` SET money=money+100 WHERE `name`=&#x27;B&#x27;&quot;</span>;<br>            pst  = conn.prepareStatement(sql02);<br>            pst.executeUpdate();<br><span class="hljs-comment">//业务完毕，提交事务</span><br>            conn.commit();<br>            System.out.println(<span class="hljs-string">&quot;操作成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br><span class="hljs-comment">//失败回滚，默认会有，不写也行</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils.release(conn,pst,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-6-池化技术"><a href="#6-6-池化技术" class="headerlink" title="6.6  池化技术"></a>6.6  池化技术</h4><p>数据库连接–执行完毕-释放<br>连接-释放十分浪费系统资源<br>池化技术:准备一些预先的资源,过来就连接预先准备好的<br>开门-业务员:等待-服务<br>常用连接数10个<br>最小连接数:10<br>最大连接数:15业务最高承载上限<br>排队等待<br>等待超时:100ms</p><p><strong>编写连接池,实现一个接口 Datasource</strong></p><p>常用连接数10个</p><p>最小连接数:10</p><p>等待超时:100ms</p><blockquote><p>开源数据源实现</p></blockquote><p>DBCP<br>C3PO L<br>Druid:阿里巴巴</p><p>DBCP：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">DataSource dataSource<span class="hljs-regexp">//</span>创建数据源DataSource<br>dataSource.getConnection();<span class="hljs-regexp">//</span>利用数据源获取连接Connection<br></code></pre></td></tr></table></figure><p>可以省略数据库连接的代码</p><p><strong>池化技术实现JDBC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils_dbcp</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;JdbcUtils被预先加载&quot;</span>);<br>            InputStream in = JdbcUtils_dbcp.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(in);<br>            <span class="hljs-comment">//创建数据源</span><br>            dataSource = BasicDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>        <span class="hljs-comment">//从数据源中获取连接</span><br>    &#125;<br>    <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>    <span class="hljs-comment">//5.实现增删改查，statement. executeUpdate(sql); statement.executeQuery(sql);</span><br>    <span class="hljs-comment">// 6.释放链接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">release</span><span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DBCP配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">DBCP配置文件</span><br><span class="hljs-comment">#连接设置</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">9789</span><br><br><span class="hljs-comment">#&lt;!-- 初始化连接 --&gt;</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><br><span class="hljs-comment">#最大连接数量</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">50</span><br><br><span class="hljs-comment">#&lt;!-- 最大空闲连接 --&gt;</span><br><span class="hljs-attr">maxIdle</span>=<span class="hljs-string">20</span><br><br><span class="hljs-comment">#&lt;!-- 最小空闲连接 --&gt;</span><br><span class="hljs-attr">minIdle</span>=<span class="hljs-string">5</span><br><br><span class="hljs-comment">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">60000</span><br><span class="hljs-comment">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】</span><br><span class="hljs-comment">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span><br><span class="hljs-attr">connectionProperties</span>=<span class="hljs-string">useUnicode=true;characterEncoding=utf8</span><br><br><span class="hljs-comment">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span><br><span class="hljs-attr">defaultAutoCommit</span>=<span class="hljs-string">true</span><br><br><span class="hljs-comment">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span><br><span class="hljs-comment">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span><br><span class="hljs-attr">defaultReadOnly</span>=<span class="hljs-string"></span><br><br><span class="hljs-comment">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span><br><span class="hljs-comment">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span><br><span class="hljs-attr">defaultTransactionIsolation</span>=<span class="hljs-string">READ_UNCOMMITTED</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TsetQuery_jdbcpool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement st = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.加载驱动</span><br>            <span class="hljs-comment">//2.用户信息和url</span><br>            <span class="hljs-comment">//3.创建数据库对象   Connection代表数据库</span><br>            conn = JdbcUtils_dbcp.getConnection();<br>            <span class="hljs-comment">//4.执行SQL对象  Statement执行sqL的对象</span><br>            st = conn.createStatement();<br>            <span class="hljs-comment">//5.实现增删改查，执行SQL语句， executeUpdate(sql); executeQuery(sql);</span><br>            String sql=<span class="hljs-string">&quot;SELECT * FROM `users`&quot;</span>;<br>            resultSet= st.executeQuery(sql);<br>            <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;姓名=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;密码=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;邮件=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;生日=&quot;</span>+resultSet.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放链接</span><br>            JdbcUtils_dbcp.release(conn,st,resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习笔记</title>
    <link href="/2020/08/26/java%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/26/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础编程"><a href="#Java基础编程" class="headerlink" title="Java基础编程"></a>Java基础编程</h1><h2 id="1、JDK的安装"><a href="#1、JDK的安装" class="headerlink" title="1、JDK的安装"></a>1、JDK的安装</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1  下载"></a>1.1  下载</h3><p>官网下载JDK：<a href="https://www.oracle.com/">https://www.oracle.com</a></p><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2  安装"></a>2.2  安装</h3><p>建议使用zip安装，而不是直接exe安装</p><h3 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3  配置环境变量"></a>2.3  配置环境变量</h3><ul><li>设置绝对路径</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204053.png" alt="image-20210411083120165"></p><ul><li>Path中添加相对路径</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204059.png" alt="image-20210411083149572"></p><ul><li>在cmd窗口查看是否生效</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204106.png" alt="image-20210411083714142"></p><h2 id="2、Java核心"><a href="#2、Java核心" class="headerlink" title="2、Java核心"></a>2、Java核心</h2><h3 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1  常量与变量"></a>2.1  常量与变量</h3><h4 id="2-1-1-基本数据类型"><a href="#2-1-1-基本数据类型" class="headerlink" title="2.1.1  基本数据类型"></a>2.1.1  基本数据类型</h4><p><strong>基本类型的变量作为参数传递时,传的是值</strong><br><strong>引用类型的变量作为参数传递时,传的是地址值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  变量的定义格式:</span><br><span class="hljs-comment"> *      数据类型 变量名 = 初始化值;</span><br><span class="hljs-comment"> *   数据类型:</span><br><span class="hljs-comment"> *      byte, short, int, long, float, double, char, boolean</span><br><span class="hljs-comment"> *   注意事项:</span><br><span class="hljs-comment"> *      A: 整形默认是int类型, 定义long类型变量的时候, 后边要加字母L(大小写均可)</span><br><span class="hljs-comment"> *      B: 浮点型默认是double类型, 定义float类型变量的时候, 后边要加字母F(大小写均可)</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VariableDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span> v = <span class="hljs-number">6</span>;<br>        System.out.println(v);<br>        <span class="hljs-keyword">short</span> vv = <span class="hljs-number">66</span>;<br>        System.out.println(vv);<br>        <span class="hljs-keyword">int</span> v00 = <span class="hljs-number">666</span>;<br>        System.out.println(v00);<br>        <span class="hljs-keyword">long</span> v01 = <span class="hljs-number">6666</span>;<br>        System.out.println(v01);<br>        <span class="hljs-keyword">float</span> v02 = <span class="hljs-number">6.6f</span>;         <span class="hljs-comment">//注意float后的f</span><br>        System.out.println(v02);<br>        <span class="hljs-keyword">double</span> v03 = <span class="hljs-number">6.66</span>;<br>        System.out.println(v03);<br>        <span class="hljs-keyword">char</span> v04 = <span class="hljs-string">&#x27;h&#x27;</span>;<br>        System.out.println(v04);<br>        String v05 = <span class="hljs-string">&quot;hhh&quot;</span>;<span class="hljs-comment">//String不是基本数据类型</span><br>        System.out.println(v05);<br>        &#123;<br>            <span class="hljs-keyword">boolean</span> v06 = <span class="hljs-keyword">true</span>;<br>            System.out.println(v06);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">6</span><br><span class="hljs-attribute">66</span><br><span class="hljs-attribute">666</span><br><span class="hljs-attribute">6666</span><br><span class="hljs-attribute">6</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">6</span>.<span class="hljs-number">66</span><br><span class="hljs-attribute">h</span><br><span class="hljs-attribute">hhh</span><br><span class="hljs-attribute">true</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204111.png" alt="image-20210502111817532"></p><h4 id="2-1-2-命名规则"><a href="#2-1-2-命名规则" class="headerlink" title="2.1.2  命名规则"></a>2.1.2  命名规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    标识符:</span><br><span class="hljs-comment">        组成:</span><br><span class="hljs-comment">            英文大小写字母, 数字, _, $</span><br><span class="hljs-comment">        命名规则:</span><br><span class="hljs-comment">            遵循驼峰命名, 见名知意.</span><br><span class="hljs-comment">            类和接口:   所有单词的首字母都大写, 其他小写：    HelloWorld和Student</span><br><span class="hljs-comment">            方法和变量: 从第二个单词开始, 所有单词的首字母大写, 其他全部小写.    getName, studyJava</span><br><span class="hljs-comment">            常量: 全部大写, 单词之间用_隔开.        MAX_VALUE </span><br><span class="hljs-comment">            包名: 全部小写, 多级包之间用.隔开, 一般是公司的域名反写.   com.ocean  </span><br><span class="hljs-comment">            作用: 包其实就是文件夹, 用来区分重名类的.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        注意事项:</span><br><span class="hljs-comment">            1. 不能以数字开头.</span><br><span class="hljs-comment">            2. 不能和Java中的关键字重名.</span><br><span class="hljs-comment">            3. 严格区分大小写.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="2-1-3-类型转换"><a href="#2-1-3-类型转换" class="headerlink" title="2.1.3  类型转换"></a>2.1.3  类型转换</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204115.png" alt="image-20210411093025292"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">类型转换:</span><br><span class="hljs-comment">        隐式类型转换:     小转大的关系</span><br><span class="hljs-comment">            数据类型的范围从小到大如下:</span><br><span class="hljs-comment">             byte,short,char  --&gt; int(默认的整形) --&gt; long --&gt; float --&gt; double(默认的浮点型)</span><br><span class="hljs-comment">        强制类型转换:     大转小的关系</span><br><span class="hljs-comment">            目标类型 变量名 = (目标类型)要转换的值;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            注意: 强制类型转换在使用的时候可能会出现丢失精度的问题.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204119.png"></p><h4 id="2-1-4-枚举类型"><a href="#2-1-4-枚举类型" class="headerlink" title="2.1.4  枚举类型"></a>2.1.4  枚举类型</h4><h3 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2  运算符"></a>2.2  运算符</h3><h4 id="2-2-1-算数运算符"><a href="#2-2-1-算数运算符" class="headerlink" title="2.2.1   算数运算符"></a>2.2.1   算数运算符</h4><p><strong>/   和  %  的区别:</strong></p><ul><li>  /  : 获取两个数据相除的商.</li><li>  %  : 获取两个数据相除的余数.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> c = a / b;<br><span class="hljs-keyword">int</span> d = a % b;<br>System.out.println(c);<span class="hljs-comment">//结果为3</span><br>System.out.println(d);<span class="hljs-comment">//结果为1</span><br></code></pre></td></tr></table></figure><p><strong>字符参加运算符</strong>，字符参与加法运算, 其实就是拿该字符在计算机中存储所表示的数据值来运算的. 例如   ‘a’ ，实际上为 97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;  <span class="hljs-comment">//97</span><br>System.out.println(a + ch); <span class="hljs-comment">//107</span><br></code></pre></td></tr></table></figure><p><strong>自增运算符：</strong>a++与++a</p><p>用法:</p><ul><li>单独使用：放在变量前或后结果一样, 都是自身+1</li><li>参与运算：<ul><li>在变量前，先自增，再以新值进行其它运算</li><li>在变量后，先以原值进行其它运算, 再自增</li></ul></li></ul><h4 id="2-2-2-赋值运算符"><a href="#2-2-2-赋值运算符" class="headerlink" title="2.2.2   赋值运算符"></a>2.2.2   赋值运算符</h4><p><strong>赋值运算符:</strong></p><ul><li>基本的赋值运算符:   =</li><li> 扩展的赋值运算符: +=, -=, *=, /=, %=</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//扩展的赋值运算符:</span><br><span class="hljs-comment">//+=的作用: 把左右两边的数据相加, 然后把结果赋值给左边: a =  a + 20;</span><br>a += <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//扩展赋值运算符的好处</span><br><span class="hljs-keyword">short</span> s = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//s = s + 1;  //为什么报错?  因为s + 1的结果是一个int类型的数据, 你把int类型的数据赋值给short类型的变量,肯定不行.</span><br><span class="hljs-comment">//怎么解决呢?</span><br><span class="hljs-comment">//方案一: 强制类型转换</span><br><span class="hljs-comment">/* s = (short)(s + 1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//方案二: 通过扩展赋值运算符实现</span><br><span class="hljs-comment">s+=3;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-关系运算符"><a href="#2-2-3-关系运算符" class="headerlink" title="2.2.3  关系运算符"></a>2.2.3  关系运算符</h4><p><strong>分类:</strong><br>    ==, !=, &gt;, &gt;=, &lt;, &lt;=</p><p><strong>运算结果:</strong><br>    关系运算符操作完毕后的结果肯定是boolean类型.</p><p><strong>注意事项:</strong><br>    千万不要把==写成了=</p><p><strong>==与equals（重写后）</strong></p><ul><li>==是指是否相同，equals是指是否相等</li><li>==是判断两个变量或实例是不是指向同一个内存空间，equals是判断两个变量或实例所指向的内存空间的值是不是相同 </li><li>==是指对内存地址进行比较 ， equals()是对字符串的内容进行比较</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204123" alt="img"></p><h4 id="2-2-4-逻辑运算符"><a href="#2-2-4-逻辑运算符" class="headerlink" title="2.2.4  逻辑运算符:"></a>2.2.4  逻辑运算符:</h4><p><strong>分类:</strong><br>        逻辑与: &amp;&amp;, 并且的关系, 要求所有条件都满足, 即有false则整体为false<br>        逻辑或: ||, 或者的关系, 要求只要满足任意一个条件即可, 即有true则整体为true<br>        逻辑非: !, 取反的意思, 以前为false, 现在为true; 以前为true, 现在为false.</p><h4 id="2-2-5-三元运算符"><a href="#2-2-5-三元运算符" class="headerlink" title="2.2.5  三元运算符"></a>2.2.5  三元运算符</h4><p><strong>格式:</strong><br>    关系表达式 ? 表达式1 : 表达式2 ;<br><strong>执行流程:</strong></p><ul><li>先判断关系表达式是否成立,<ul><li>成立,   执行表达式1;</li><li>不成立, 执行表达式2;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求: 求两个整数的最大值</span><br><span class="hljs-comment">//1. 定义两个变量记录两个整数.</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//2. 通过三元运算符计算他们的最大值.</span><br><span class="hljs-keyword">int</span> max = (a &gt;= b) ? a : b ;<br><br><span class="hljs-comment">//max=100</span><br></code></pre></td></tr></table></figure><h3 id="2-3-流程控制之选择结构"><a href="#2-3-流程控制之选择结构" class="headerlink" title="2.3  流程控制之选择结构"></a>2.3  流程控制之选择结构</h3><h4 id="2-3-1-if"><a href="#2-3-1-if" class="headerlink" title="2.3.1  if"></a>2.3.1  if</h4><p><strong>if语句格式：（这不是嵌套）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(关系表达式<span class="hljs-number">1</span>) &#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(关系表达式<span class="hljs-number">2</span>)&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(关系表达式<span class="hljs-number">3</span>)&#123;<br>    语句体<span class="hljs-number">3</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(关系表达式n)&#123;   <span class="hljs-comment">//n的意思是: 这里可以写多个else if(关系表达式) &#123;&#125;</span><br>    语句体n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    语句体n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204127.png" alt="image-20210411094955076" style="zoom:80%;" /><blockquote><p>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">//pswm快速写main函数</span><br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//new一个对象</span><br>    System.out.println(<span class="hljs-string">&quot;请选择您想听到的语音：\n1.二仙桥大爷\n2.楚云飞手下\n3.马保国\n请您输入对应数字：&quot;</span>);<br>    <span class="hljs-keyword">int</span> i = sc.nextInt();<span class="hljs-comment">//接收数据</span><br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;到二仙桥走成华大道&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;山本，我日你先人&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">3</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;耗子尾汁&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;404&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-switch"><a href="#2-3-2-switch" class="headerlink" title="2.3.2  switch"></a>2.3.2  switch</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204131.png" alt="image-20210411095330536"></p><blockquote><p>实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">//pswm快速写main函数</span><br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//new一个对象</span><br>    System.out.println(<span class="hljs-string">&quot;请选择您想听到的语音：\n1.二仙桥大爷\n2.楚云飞手下\n3.马保国\n4.王冰冰\n5.川普\n请您输入对应数字：&quot;</span>);<br>    <span class="hljs-keyword">int</span> i = sc.nextInt();<span class="hljs-comment">//接收数据</span><br>    <span class="hljs-keyword">switch</span> (i)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            System.out.println(<span class="hljs-string">&quot;到二仙桥走成华大道&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            System.out.println(<span class="hljs-string">&quot;山本，我日你先人&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            System.out.println(<span class="hljs-string">&quot;耗子尾汁&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            System.out.println(<span class="hljs-string">&quot;^o^&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            System.out.println(<span class="hljs-string">&quot;我爱China&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;404&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-流程控制之循环结构"><a href="#2-4-流程控制之循环结构" class="headerlink" title="2.4  流程控制之循环结构"></a>2.4  流程控制之循环结构</h3><h4 id="2-4-1-for循环"><a href="#2-4-1-for循环" class="headerlink" title="2.4.1  for循环"></a>2.4.1  for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * for循环的使用</span><br><span class="hljs-comment"> * for(初始化语句;判断条件语句;控制条件语句)&#123;</span><br><span class="hljs-comment"> *     ...//循环体</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fforfor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        label_class:<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">50</span>; j++) &#123;<br>                System.out.println(i + <span class="hljs-string">&quot;班&quot;</span> + j + <span class="hljs-string">&quot;号&quot;</span>);<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span> &amp;&amp; j == <span class="hljs-number">42</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;众里寻你千百度，你TMD却在这儿住&quot;</span>);<br>                    <span class="hljs-keyword">break</span> label_class;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-while循环"><a href="#2-4-2-while循环" class="headerlink" title="2.4.2  while循环"></a>2.4.2  while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * while() 与 do...while();的使用</span><br><span class="hljs-comment"> * 初始化语句;</span><br><span class="hljs-comment"> * while(判断条件语句)&#123;</span><br><span class="hljs-comment"> *      循环体语句;</span><br><span class="hljs-comment"> *      控制条件语句;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 初始化语句；</span><br><span class="hljs-comment"> * do&#123;</span><br><span class="hljs-comment"> *      循环体;</span><br><span class="hljs-comment"> *      控制条件语句;</span><br><span class="hljs-comment"> * &#125;while(条件判断语句);</span><br><span class="hljs-comment"> * do..while不管判断条件是否成立，循环体都会先执行一次</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) &#123;<br><br>        i++;<br>    &#125;<br>    System.out.println(i);<br>    <br>    <span class="hljs-keyword">boolean</span> isok = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span>+j+<span class="hljs-string">&quot;次练习&quot;</span>);<br>        <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">3</span>) &#123;<br>            isok = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        j++;<span class="hljs-comment">//控制语句</span><br>    &#125; <span class="hljs-keyword">while</span> (!isok);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-3-Random与Scanner的简单使用"><a href="#2-4-3-Random与Scanner的简单使用" class="headerlink" title="2.4.3  Random与Scanner的简单使用"></a>2.4.3  Random与Scanner的简单使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Random r = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">int</span> truenum=r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//产生数的范围是0到99，[0,100),加一后为1到100</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;猜数字：范围1-100&quot;</span>);<br>        Scanner sca=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> numgass= sca.nextInt();<br>        <span class="hljs-keyword">if</span>(numgass&gt;truenum) System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numgass&lt;truenum) System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;恭喜你中了大奖:java基础语法学的可以了&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-数组"><a href="#2-5-数组" class="headerlink" title="2.5  数组"></a>2.5  数组</h3><p>数组是引用类型</p><p><strong>基本类型的变量作为参数传递时,传的是值</strong><br><strong>引用类型的变量作为参数传递时,传的是地址值</strong></p><p><strong>数组的定义：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">int</span>[] arr001 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">//注意new这种命名方法</span><br><span class="hljs-keyword">int</span>[] arr002 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;;<br><span class="hljs-comment">//索引范围0~2</span><br><span class="hljs-comment">//长度为3，使用arr001.length查询</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<span class="hljs-comment">//打印函数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>        System.out.println(arr[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用类型的变量作为参数传递给方法时，传递的是地址值</p><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204137.png" alt="image-20210502104647144"></p><h3 id="2-6-关键字"><a href="#2-6-关键字" class="headerlink" title="2.6  关键字"></a>2.6  关键字</h3><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>类加载机制，当类加载的时候，static修饰的东西会一起加载到内存当中</p><ul><li><p>修饰变量</p></li><li><p>修饰方法：方法无法被重写</p></li></ul><p>可以通过   类.成员方法()   的方式进行对方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> lesson010.static001;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.random;<br><span class="hljs-comment">//特殊用法：可以导入包的方法，设为静态,直接使用random，而不用Math.random();</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>&#123;<br>        Math.random();<br>        random();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//static修饰的，可以直接使用类调用</span><br>        Student.study();<br>        Student.name=<span class="hljs-string">&quot;张三&quot;</span>;<br>        <br>        Student student=<span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-comment">//非静态的只能通过对象来调用</span><br>        student.age=<span class="hljs-number">22</span>;<br>        student.play();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>修饰变量：常量</p><p>修饰方法：无法被重写</p><p>修饰类：无法被继承</p><p>断子绝孙</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> HERO=<span class="hljs-string">&quot;英雄&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="3、Java编程思想"><a href="#3、Java编程思想" class="headerlink" title="3、Java编程思想"></a>3、Java编程思想</h2><ul><li><p>面向过程的思想</p><ul><li>面向过程思想就是把关注点放在一件事或一个活动中涉及到的步骤（也就是过程）上的思想（或思维方式） </li><li>面向对象和面向过程的区别主要在于做事方式的不同，一个关注事物（对象），另一个过程（步骤）</li></ul></li><li><p>面向对象的思想（oop）：</p><ul><li>物以类聚</li><li>是一种现实世界理解和抽象的方法</li><li>面向对象(Object Oriented)是软件开发方法，一种编程范式</li><li><strong>核心思想是抽象</strong></li><li>三大特征<ul><li>抽象</li><li>继承</li><li>多态</li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204142.png" alt="image-20210412181050042"></p><h3 id="3-1-封装"><a href="#3-1-封装" class="headerlink" title="3.1  封装"></a>3.1  封装</h3><h4 id="3-1-1-类与对象"><a href="#3-1-1-类与对象" class="headerlink" title="3.1.1  类与对象"></a>3.1.1  类与对象</h4><p>类的定义方法很简单，主要是思考如何抽象一个类的过程耗费时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的结构</span><br><span class="hljs-keyword">public</span> 类名()&#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-comment">//构造器（构造方法）</span><br>    <span class="hljs-comment">//成员方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类与对象</strong></p><ul><li>类：属性和行为的集合，是一个抽象概念 </li><li>对象：是该类事物的具体体现，是一种具体存在<ul><li>如何new一个对象：类名 对象名 = new 类名();</li></ul></li></ul><h4 id="3-1-2-构造方法"><a href="#3-1-2-构造方法" class="headerlink" title="3.1.2  构造方法"></a>3.1.2  构造方法</h4><ul><li><p>构造方法又称构造器</p></li><li><p>作用：初始化对象</p></li><li><p>可以不写，默认为无参构造</p></li><li><p>可以快速通过Alt+Insert，选择Consruction快速生成有参构造和无参构造</p></li></ul><h4 id="3-1-3-成员方法"><a href="#3-1-3-成员方法" class="headerlink" title="3.1.3  成员方法"></a>3.1.3  成员方法</h4><p>常用成员方法：</p><ul><li>可以快速通过Alt+Insert，选择Consruction快速生成以上方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204145.png" alt="image-20210412183520205"></p><h4 id="3-1-4-方法重载"><a href="#3-1-4-方法重载" class="headerlink" title="3.1.4  方法重载"></a>3.1.4  方法重载</h4><p>定义：</p><ul><li>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。</li><li>方法重载通常用于创建完成一组任务相似但参数的类型或参数的个数或参数的顺序不同的方法。 </li><li>在类中可以创建多个方法，它们可以有相同的名字，<strong>但必须具有不同的参数</strong>，即或者是参数的个数不同，或者是参数的类型不同。</li><li>调用方法时通过传递给它们的不同个数和类型的参数，以及传入参数的顺序来决定具体使用哪个方法。</li><li>例如：有参无参构造方法，方法名字相同，参数不一样。</li></ul><h3 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2  继承"></a>3.2  继承</h3><h4 id="3-2-1-子类与父类"><a href="#3-2-1-子类与父类" class="headerlink" title="3.2.1  子类与父类"></a>3.2.1  子类与父类</h4><p><strong>继承可以使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。</strong></p><p>关键字<strong>extends：扩展</strong></p><p><strong>ctrl+H查看继承关系图</strong></p><p><strong>Java只支持类的单继承,但是支持多层(重)继承</strong></p><p><strong>Java支持接口的多继承,语法为:接口 A extends接口B接口C,接口D</strong></p><ul><li>定义一个父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Parent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Parent</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;父类的带参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义一个类Child，继承父类Parent，使Child成为Parent的子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Child</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<span class="hljs-comment">//默认</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Child</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name, age);<span class="hljs-comment">//这句话如果不写也会默认执行，自动生成的构造器会有这句话</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-this与supper及变量"><a href="#3-2-2-this与supper及变量" class="headerlink" title="3.2.2  this与supper及变量"></a>3.2.2  this与supper及变量</h4><p>变量的使用（java中变量的使用遵循就近原则）</p><ul><li>局部变量    直接写变量名</li><li>本类成员变量  this.变量名</li><li>父类成员变量  super.变量名</li><li>在方法重载时使用较多</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fu</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//方法重载的标识符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>        System.out.println(i);<span class="hljs-comment">//1   局部变量</span><br>        System.out.println(<span class="hljs-keyword">this</span>.i);<span class="hljs-comment">//10 本类成员变量</span><br>        System.out.println(<span class="hljs-keyword">super</span>.i);<span class="hljs-comment">//100   父类成员变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-访问权限修饰符"><a href="#3-2-3-访问权限修饰符" class="headerlink" title="3.2.3  访问权限修饰符"></a>3.2.3  访问权限修饰符</h4><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/20210510204149.png" alt="image-20210412191210591"></p><h4 id="3-2-4-方法重写"><a href="#3-2-4-方法重写" class="headerlink" title="3.2.4  方法重写"></a>3.2.4  方法重写</h4><p>Override</p><p>在Java和其他一些高级面向对象的编程语言中，子类可继承父类中的方法，而不需要重新编写相同的方法。</p><p>但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。</p><h4 id="3-2-5-成员变量的使用结论"><a href="#3-2-5-成员变量的使用结论" class="headerlink" title="3.2.5  成员变量的使用结论"></a>3.2.5  成员变量的使用结论</h4><p><img src="java.assets/image-20210502113419930.png" alt="image-20210502113419930"></p><h3 id="3-3-多态"><a href="#3-3-多态" class="headerlink" title="3.3  多态"></a>3.3  多态</h3><ul><li>在编程语言和类型论中，多态（英语：polymorphism）指为不同数据类型的实体提供统一的接口。 </li><li>多态类型可以将自身所支持的操作套用到其它类型的值上。</li></ul><h4 id="3-3-1-使用场景"><a href="#3-3-1-使用场景" class="headerlink" title="3.3.1  使用场景"></a>3.3.1  使用场景</h4><ul><li>父类与子类之间存在继承关系</li><li>方法重写</li><li><strong>父类引用指向子类对象</strong>（子类 is a 父类的关系），编译在左，执行在右</li><li>父类转换成子类不能自动完成，父类转换成子类的前提是父类的真身是这个子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal d = <span class="hljs-keyword">new</span> Dog();<span class="hljs-comment">//翻译：狗是一个动物</span><br><span class="hljs-comment">//多态中调用成员方法是</span><br><span class="hljs-comment">// 编译看左：左边的类型有没有这个成员(若左边没有这个成员，就会报错)</span><br><span class="hljs-comment">// 运行看右：运行时具体用的是右边类中的该成员</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-内存图"><a href="#3-3-2-内存图" class="headerlink" title="3.3.2  内存图"></a>3.3.2  内存图</h4><h4 id="3-3-3-抽象类"><a href="#3-3-3-抽象类" class="headerlink" title="3.3.3  抽象类"></a>3.3.3  抽象类</h4><ul><li>抽象的抽象：约束</li><li>要求子类必须重写抽象类的抽象方法</li><li>关键字   abstract<ul><li>加在类上就是抽象类</li><li>加在方法上就是抽象方法</li></ul></li><li>抽象类中不一定有抽象方法；但，有抽象方法一定是抽象类(或接口)</li><li>缺点：java中，抽象类只能被单继承，一个类只能继承一个抽象类；而接口可以多继承，一个类可以继承多个接口</li></ul><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ABC=<span class="hljs-number">10</span>;<span class="hljs-comment">//final修饰常量</span><br><br>    <span class="hljs-comment">//成员方法</span><br>    <br><span class="hljs-comment">//    抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//    构造器</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//普通方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    public void eat() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;狗吃骨头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>public class Mouse extends Animal &#123;    @Override    public void eat() &#123;        System.out.println(&quot;耗子吃奶酪&quot;);    &#125;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>public class Test &#123;    public static void main(String[] args) &#123;        Animal a = new Dog();        a.eat();        Animal b = new Mouse();        b.eat();    &#125;&#125;<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**输出结果**</span><br><br></code></pre></td></tr></table></figure>狗吃骨头睡觉耗子吃奶酪<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-meta">#### 3.3.3  接口</span><br><br>普通类：只有具体实现<br>抽象类：具体实现和规范(抽象方法)都有！<br>接口：只有规范！<br><br>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。抽象的能力最重要<br><br>**接口是比抽象类更抽象的存在**<br><br>**作用：定义方法让不同的人实现**<br><br>实现类（子类）实现接口的关键字：implements，子类必须要重写接口中的方法<br><br>其方法会有默认修饰符   **<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>**   <br><br>其成员属性默认修饰符为   **<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final**<br><br>写了和不写一样，所以我们不用再写这两个修饰符<br><br>- 接口<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Smoke</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">int</span> NUM = <span class="hljs-number">10</span>;<span class="hljs-comment">//静态常量</span><br>    <span class="hljs-built_in">int</span> DRINKS = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smoke</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drink</span>(<span class="hljs-params"></span>)</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">menthod001</span>(<span class="hljs-params"></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;JDK8的新特性&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//非静态方法</span><br>    <span class="hljs-function"><span class="hljs-literal">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">menthod002</span>(<span class="hljs-params"></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;JDK8的新特性&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//私有方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">menthod003</span>(<span class="hljs-params"></span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;JDK9的新特性&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>- 实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Older</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Smoke</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smoke</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;抽抽抽&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>- 测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Smoke older001 = <span class="hljs-keyword">new</span> Older();<br>        older001.smoke();<br>        System.out.println(<span class="hljs-string">&quot;常量是&quot;</span>+Smoke.NUM);<br>        Smoke.menthod001();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>- 测试结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">抽抽抽<br>常量是10<br>JDK8的新特性<br></code></pre></td></tr></table></figure># 查漏补缺判断父子关系：instanceof转义字符pare# 技术积累- 先写注释，思路就是注释，注释就是思路- 写方法时，先写方法内的变量，首先想能不能把这个方法给封装（脚本文件的思想），先写内部变量，再写到方法参数，养成这种思维和良好的习惯- 学习方法推荐:1、先会用、2、货比3家,寻找其他解决方案,3、分析源码</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>技术积累</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2020/07/26/%E6%9B%B2%E6%8A%98%E7%9A%84Hello-World/"/>
    <url>/2020/07/26/%E6%9B%B2%E6%8A%98%E7%9A%84Hello-World/</url>
    
    <content type="html"><![CDATA[<h2 id="我的第一篇“Hello-World”博客"><a href="#我的第一篇“Hello-World”博客" class="headerlink" title="我的第一篇“Hello World”博客"></a><center><strong>我的第一篇“Hello World”博客</strong></center></h2><p><img src="https://cdn.jsdelivr.net/gh/Mister-Bugs/HexoImage/img/photo_jgjkfaj14.jpg" alt="photo_jgjkfaj14"></p><h2 id="1-搭建hexo博客"><a href="#1-搭建hexo博客" class="headerlink" title="1 搭建hexo博客"></a>1 搭建hexo博客</h2><h3 id="1-1-什么是hexo？"><a href="#1-1-什么是hexo？" class="headerlink" title="1.1 什么是hexo？"></a>1.1 什么是hexo？</h3><p>hexo是一种博客框架</p><h3 id="1-2-安装前提"><a href="#1-2-安装前提" class="headerlink" title="1.2 安装前提"></a>1.2 安装前提</h3><ul><li><a href="https://hexo.io/zh-cn/docs/">安装手册</a></li><li>Git    </li><li>Node.js</li></ul><h3 id="1-3-安装Git"><a href="#1-3-安装Git" class="headerlink" title="1.3 安装Git"></a>1.3 安装Git</h3><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">下载Git</a></p><p><a href="https://blog.csdn.net/weixin_44325444/article/details/107034337?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161171186416780261976036%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161171186416780261976036&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-107034337.pc_search_result_no_baidu_js&utm_term=%25E5%25AE%2589%25E8%25A3%2585git">安装过程</a></p><p><a href="https://blog.csdn.net/guchengyixin/article/details/106426889?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161171170616780271536352%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161171170616780271536352&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-106426889.pc_search_result_no_baidu_js&utm_term=git%25E9%2585%258D%25E7%258E%25AF%25E5%25A2%2583%25E5%258F%2598%25E9%2587%258F">配环境变量</a></p><h3 id="1-4-安装Node-js与Hexo"><a href="#1-4-安装Node-js与Hexo" class="headerlink" title="1.4 安装Node.js与Hexo"></a>1.4 安装Node.js与Hexo</h3><p><a href="https://nodejs.org/en/">下载Node.js</a></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">安装视频</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">win10使用命令行安装<br>node -v<span class="hljs-comment">#查看node版本</span><br>npm -v<span class="hljs-comment">#查看npm版本</span><br>npm install -g cnpm <span class="hljs-params">--registry=http</span>:<span class="hljs-string">//registry.npm.taobao.org</span><span class="hljs-comment">#安装淘宝的cnpm 管理器</span><br>cnpm -v<span class="hljs-comment">#查看cnpm版本</span><br>cnpm install -g hexo-cli    <span class="hljs-comment">#安装hexo框架</span><br>hexo -v<span class="hljs-comment">#查看hexo版本</span><br>mkdir blog<span class="hljs-comment">#创建blog目录</span><br><span class="hljs-keyword">cd</span> blog <span class="hljs-comment">#进入blog目录</span><br>hexo init <span class="hljs-comment">#生成博客 初始化博客</span><br>hexo s<span class="hljs-comment">#启动本地博客服务</span><br>http:<span class="hljs-string">//localhost</span><span class="hljs-function">:4000</span>/<span class="hljs-comment">#本地访问地址</span><br>hexo n <span class="hljs-string">&quot;我的第一篇文章&quot;</span> <span class="hljs-comment">#创建新的文章 </span><br>\<span class="hljs-comment">#返回blog目录</span><br>hexo clean <span class="hljs-comment">#清理</span><br>hexo g <span class="hljs-comment">#生成</span><br>\<span class="hljs-comment">#Github创建一个新的仓库 YourGithubName.github.io</span><br>cnpm install <span class="hljs-params">--save</span> hexo-deployer-git <span class="hljs-comment">#在blog目录下安装git部署插件</span><br>\<span class="hljs-comment">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span><br>hexo c<span class="hljs-comment">#清理一下</span><br>hexo g<span class="hljs-comment">#生成</span><br>hexo d<span class="hljs-comment">#部署到远程Github仓库</span><br></code></pre></td></tr></table></figure><h3 id="1-5-优化界面"><a href="#1-5-优化界面" class="headerlink" title="1.5 优化界面"></a>1.5 优化界面</h3><p>找到blog文件夹下的 _config.yml ，打开更改其中的参数</p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid主题</a></p><h2 id="2-遇到的问题"><a href="#2-遇到的问题" class="headerlink" title="2 遇到的问题"></a>2 遇到的问题</h2><p>不会配置环境变量</p><p>对Command Prompt不熟悉</p><p>不会Markdown语言</p><h2 id="3-技术积累"><a href="#3-技术积累" class="headerlink" title="3 技术积累"></a>3 技术积累</h2><h3 id="3-1-环境变量是个啥"><a href="#3-1-环境变量是个啥" class="headerlink" title="3.1 环境变量是个啥"></a>3.1 环境变量是个啥</h3><p>环境变量：指明os的重要目录在哪里</p><p><strong>环境变量只是为了全局使用而已!</strong></p><p>win+r后，cmd后，输入命令提示符语言，系统会在目录（规定的文件夹）内寻找程序，这些目录就与我们配置的环境变量相关，一般为目录的文件路径，常用的有SystemRoot等。</p><p><a href="https://www.bilibili.com/video/BV1w741147G9">讲解视频</a></p><h3 id="3-2-常用命令提示符语言"><a href="#3-2-常用命令提示符语言" class="headerlink" title="3.2 常用命令提示符语言"></a>3.2 常用命令提示符语言</h3><p>百度搜索   命令行</p><p>Command Prompt</p><p>d:          //切换至d盘</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mkdir dir1 创建一个叫做 <span class="hljs-string">&#x27;dir1&#x27;</span> 的目录<span class="hljs-string">&#x27;</span><br><span class="hljs-string">cd ..     返回上一级目录</span><br><span class="hljs-string">cd home 进入 &#x27;</span>hom<span class="hljs-string">e&#x27; 目录&#x27;</span><br></code></pre></td></tr></table></figure><p>Tab可补齐文件名</p><h3 id="3-3-Hexo常用命令"><a href="#3-3-Hexo常用命令" class="headerlink" title="3.3 Hexo常用命令"></a>3.3 Hexo常用命令</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix">hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo new <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo clea              <span class="hljs-comment">#一般hexo g前，要hexo c一下。</span><br>hexo <span class="hljs-attr">g</span> == hexo generate<span class="hljs-comment">#生成</span><br>hexo <span class="hljs-attr">s</span> == hexo server <span class="hljs-comment">#启动服务预览</span><br>hexo <span class="hljs-attr">d</span> == hexo deploy<span class="hljs-comment">#部署</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_26975307/article/details/62447489?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161171362016780269831462%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161171362016780269831462&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-62447489.pc_search_result_no_baidu_js&utm_term=hexo%25E5%25B8%25B8%25E7%2594%25A8%25E5%2591%25BD%25E4%25BB%25A4">常用命令参考</a></p><h3 id="3-4-Markdown语言"><a href="#3-4-Markdown语言" class="headerlink" title="3.4 Markdown语言"></a>3.4 Markdown语言</h3><p>安装Typora</p><p><a href="https://www.bilibili.com/video/BV1hJ411X75X">参考视频</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
